#include "custom_types.hpp"

#include <array>       // for array, _Array_const_iterator
#include <functional>  // for less
#include <new>         // for operator new
#include <type_traits> // for move
#include <utility>     // for min, find
#include <vector>      // for vector, allocator, vector<>::iterator

#include "entity_db.hpp" // for to_id

const std::vector<std::pair<CUSTOM_TYPE, std::string_view>> custom_type_names = {
    {CUSTOM_TYPE::ACIDBUBBLE, "ACIDBUBBLE"},
    {CUSTOM_TYPE::ALIEN, "ALIEN"},
    {CUSTOM_TYPE::ALTAR, "ALTAR"},
    {CUSTOM_TYPE::AMMIT, "AMMIT"},
    {CUSTOM_TYPE::ANKHPOWERUP, "ANKHPOWERUP"},
    {CUSTOM_TYPE::ANUBIS, "ANUBIS"},
    {CUSTOM_TYPE::APEPHEAD, "APEPHEAD"},
    {CUSTOM_TYPE::APEPPART, "APEPPART"},
    {CUSTOM_TYPE::ARROW, "ARROW"},
    {CUSTOM_TYPE::ARROWTRAP, "ARROWTRAP"},
    {CUSTOM_TYPE::AXOLOTL, "AXOLOTL"},
    {CUSTOM_TYPE::AXOLOTLSHOT, "AXOLOTLSHOT"},
    {CUSTOM_TYPE::BACKPACK, "BACKPACK"},
    {CUSTOM_TYPE::BAT, "BAT"},
    {CUSTOM_TYPE::BEE, "BEE"},
    {CUSTOM_TYPE::BEG, "BEG"},
    {CUSTOM_TYPE::BGBACKLAYERDOOR, "BGBACKLAYERDOOR"},
    {CUSTOM_TYPE::BGEGGSHIPROOM, "BGEGGSHIPROOM"},
    {CUSTOM_TYPE::BGFLOATINGDEBRIS, "BGFLOATINGDEBRIS"},
    {CUSTOM_TYPE::BGMOVINGSTAR, "BGMOVINGSTAR"},
    {CUSTOM_TYPE::BGRELATIVEELEMENT, "BGRELATIVEELEMENT"},
    {CUSTOM_TYPE::BGSHOOTINGSTAR, "BGSHOOTINGSTAR"},
    {CUSTOM_TYPE::BGSHOPENTRENCE, "BGSHOPENTRENCE"},
    {CUSTOM_TYPE::BGSHOPKEEPERPRIME, "BGSHOPKEEPERPRIME"},
    {CUSTOM_TYPE::BGSURFACELAYER, "BGSURFACELAYER"},
    {CUSTOM_TYPE::BGSURFACESTAR, "BGSURFACESTAR"},
    {CUSTOM_TYPE::BGTUTORIALSIGN, "BGTUTORIALSIGN"},
    {CUSTOM_TYPE::BIGSPEARTRAP, "BIGSPEARTRAP"},
    {CUSTOM_TYPE::BIRDIES, "BIRDIES"},
    {CUSTOM_TYPE::BODYGUARD, "BODYGUARD"},
    {CUSTOM_TYPE::BOMB, "BOMB"},
    {CUSTOM_TYPE::BONEBLOCK, "BONEBLOCK"},
    {CUSTOM_TYPE::BOOMBOX, "BOOMBOX"},
    {CUSTOM_TYPE::BOOMERANG, "BOOMERANG"},
    {CUSTOM_TYPE::BOULDER, "BOULDER"},
    {CUSTOM_TYPE::BOULDERSPAWNER, "BOULDERSPAWNER"},
    {CUSTOM_TYPE::BULLET, "BULLET"},
    {CUSTOM_TYPE::BURNINGROPEEFFECT, "BURNINGROPEEFFECT"},
    {CUSTOM_TYPE::BUTTON, "BUTTON"},
    {CUSTOM_TYPE::CAMERAFLASH, "CAMERAFLASH"},
    {CUSTOM_TYPE::CAPE, "CAPE"},
    {CUSTOM_TYPE::CATMUMMY, "CATMUMMY"},
    {CUSTOM_TYPE::CAVEMAN, "CAVEMAN"},
    {CUSTOM_TYPE::CAVEMANSHOPKEEPER, "CAVEMANSHOPKEEPER"},
    {CUSTOM_TYPE::CHAIN, "CHAIN"},
    {CUSTOM_TYPE::CHAINEDPUSHBLOCK, "CHAINEDPUSHBLOCK"},
    {CUSTOM_TYPE::CHEST, "CHEST"},
    {CUSTOM_TYPE::CINEMATICANCHOR, "CINEMATICANCHOR"},
    {CUSTOM_TYPE::CITYOFGOLDDOOR, "CITYOFGOLDDOOR"},
    {CUSTOM_TYPE::CLAMBASE, "CLAMBASE"},
    {CUSTOM_TYPE::CLAW, "CLAW"},
    {CUSTOM_TYPE::CLIMBABLEROPE, "CLIMBABLEROPE"},
    {CUSTOM_TYPE::CLONEGUNSHOT, "CLONEGUNSHOT"},
    {CUSTOM_TYPE::COBRA, "COBRA"},
    {CUSTOM_TYPE::COFFIN, "COFFIN"},
    {CUSTOM_TYPE::COIN, "COIN"},
    {CUSTOM_TYPE::CONTAINER, "CONTAINER"},
    {CUSTOM_TYPE::CONVEYORBELT, "CONVEYORBELT"},
    {CUSTOM_TYPE::COOKFIRE, "COOKFIRE"},
    {CUSTOM_TYPE::CRABMAN, "CRABMAN"},
    {CUSTOM_TYPE::CRITTER, "CRITTER"},
    {CUSTOM_TYPE::CRITTERBEETLE, "CRITTERBEETLE"},
    {CUSTOM_TYPE::CRITTERBUTTERFLY, "CRITTERBUTTERFLY"},
    {CUSTOM_TYPE::CRITTERCRAB, "CRITTERCRAB"},
    {CUSTOM_TYPE::CRITTERDRONE, "CRITTERDRONE"},
    {CUSTOM_TYPE::CRITTERFIREFLY, "CRITTERFIREFLY"},
    {CUSTOM_TYPE::CRITTERFISH, "CRITTERFISH"},
    {CUSTOM_TYPE::CRITTERLOCUST, "CRITTERLOCUST"},
    {CUSTOM_TYPE::CRITTERPENGUIN, "CRITTERPENGUIN"},
    {CUSTOM_TYPE::CRITTERSLIME, "CRITTERSLIME"},
    {CUSTOM_TYPE::CRITTERSNAIL, "CRITTERSNAIL"},
    {CUSTOM_TYPE::CROCMAN, "CROCMAN"},
    {CUSTOM_TYPE::CROSSBEAM, "CROSSBEAM"},
    {CUSTOM_TYPE::CRUSHTRAP, "CRUSHTRAP"},
    {CUSTOM_TYPE::CURSEDEFFECT, "CURSEDEFFECT"},
    {CUSTOM_TYPE::CURSEDPOT, "CURSEDPOT"},
    {CUSTOM_TYPE::DECORATEDDOOR, "DECORATEDDOOR"},
    {CUSTOM_TYPE::DECOREGENERATINGBLOCK, "DECOREGENERATINGBLOCK"},
    {CUSTOM_TYPE::DESTRUCTIBLEBG, "DESTRUCTIBLEBG"},
    {CUSTOM_TYPE::DMALIENBLAST, "DMALIENBLAST"},
    {CUSTOM_TYPE::DMSPAWNING, "DMSPAWNING"},
    {CUSTOM_TYPE::DOOR, "DOOR"},
    {CUSTOM_TYPE::DRILL, "DRILL"},
    {CUSTOM_TYPE::DUSTWALLAPEP, "DUSTWALLAPEP"},
    {CUSTOM_TYPE::EGGPLANTMINISTER, "EGGPLANTMINISTER"},
    {CUSTOM_TYPE::EGGPLANTTHROWER, "EGGPLANTTHROWER"},
    {CUSTOM_TYPE::EGGSAC, "EGGSAC"},
    {CUSTOM_TYPE::EGGSHIPCENTERJETFLAME, "EGGSHIPCENTERJETFLAME"},
    {CUSTOM_TYPE::EGGSHIPDOOR, "EGGSHIPDOOR"},
    {CUSTOM_TYPE::EGGSHIPDOORS, "EGGSHIPDOORS"},
    {CUSTOM_TYPE::ELEVATOR, "ELEVATOR"},
    {CUSTOM_TYPE::EMPRESSGRAVE, "EMPRESSGRAVE"},
    {CUSTOM_TYPE::ENTITY, "ENTITY"},
    {CUSTOM_TYPE::EXCALIBUR, "EXCALIBUR"},
    {CUSTOM_TYPE::EXITDOOR, "EXITDOOR"},
    {CUSTOM_TYPE::EXPLOSION, "EXPLOSION"},
    {CUSTOM_TYPE::FALLINGPLATFORM, "FALLINGPLATFORM"},
    {CUSTOM_TYPE::FIREBALL, "FIREBALL"},
    {CUSTOM_TYPE::FIREBUG, "FIREBUG"},
    {CUSTOM_TYPE::FIREBUGUNCHAINED, "FIREBUGUNCHAINED"},
    {CUSTOM_TYPE::FIREFROG, "FIREFROG"},
    {CUSTOM_TYPE::FISH, "FISH"},
    {CUSTOM_TYPE::FLAME, "FLAME"},
    {CUSTOM_TYPE::FLAMESIZE, "FLAMESIZE"},
    {CUSTOM_TYPE::FLOOR, "FLOOR"},
    {CUSTOM_TYPE::FLY, "FLY"},
    {CUSTOM_TYPE::FLYHEAD, "FLYHEAD"},
    {CUSTOM_TYPE::FORCEFIELD, "FORCEFIELD"},
    {CUSTOM_TYPE::FORESTSISTER, "FORESTSISTER"},
    {CUSTOM_TYPE::FROG, "FROG"},
    {CUSTOM_TYPE::FROSTBREATHEFFECT, "FROSTBREATHEFFECT"},
    {CUSTOM_TYPE::FROZENLIQUID, "FROZENLIQUID"},
    {CUSTOM_TYPE::FXALIENBLAST, "FXALIENBLAST"},
    {CUSTOM_TYPE::FXANKHBROKENPIECE, "FXANKHBROKENPIECE"},
    {CUSTOM_TYPE::FXANKHROTATINGSPARK, "FXANKHROTATINGSPARK"},
    {CUSTOM_TYPE::FXCOMPASS, "FXCOMPASS"},
    {CUSTOM_TYPE::FXEMPRESS, "FXEMPRESS"},
    {CUSTOM_TYPE::FXFIREFLYLIGHT, "FXFIREFLYLIGHT"},
    {CUSTOM_TYPE::FXHUNDUNNECKPIECE, "FXHUNDUNNECKPIECE"},
    {CUSTOM_TYPE::FXJELLYFISHSTAR, "FXJELLYFISHSTAR"},
    {CUSTOM_TYPE::FXJETPACKFLAME, "FXJETPACKFLAME"},
    {CUSTOM_TYPE::FXKINGUSLIDING, "FXKINGUSLIDING"},
    {CUSTOM_TYPE::FXLAMASSUATTACK, "FXLAMASSUATTACK"},
    {CUSTOM_TYPE::FXMAINEXITDOOR, "FXMAINEXITDOOR"},
    {CUSTOM_TYPE::FXNECROMANCERANKH, "FXNECROMANCERANKH"},
    {CUSTOM_TYPE::FXOUROBORODRAGONPART, "FXOUROBORODRAGONPART"},
    {CUSTOM_TYPE::FXOUROBOROOCCLUDER, "FXOUROBOROOCCLUDER"},
    {CUSTOM_TYPE::FXPICKUPEFFECT, "FXPICKUPEFFECT"},
    {CUSTOM_TYPE::FXPLAYERINDICATOR, "FXPLAYERINDICATOR"},
    {CUSTOM_TYPE::FXQUICKSAND, "FXQUICKSAND"},
    {CUSTOM_TYPE::FXSALECONTAINER, "FXSALECONTAINER"},
    {CUSTOM_TYPE::FXSHOTGUNBLAST, "FXSHOTGUNBLAST"},
    {CUSTOM_TYPE::FXSORCERESSATTACK, "FXSORCERESSATTACK"},
    {CUSTOM_TYPE::FXSPARKSMALL, "FXSPARKSMALL"},
    {CUSTOM_TYPE::FXSPRINGTRAPRING, "FXSPRINGTRAPRING"},
    {CUSTOM_TYPE::FXTIAMATHEAD, "FXTIAMATHEAD"},
    {CUSTOM_TYPE::FXTIAMATTAIL, "FXTIAMATTAIL"},
    {CUSTOM_TYPE::FXTIAMATTORSO, "FXTIAMATTORSO"},
    {CUSTOM_TYPE::FXTORNJOURNALPAGE, "FXTORNJOURNALPAGE"},
    {CUSTOM_TYPE::FXUNDERWATERBUBBLE, "FXUNDERWATERBUBBLE"},
    {CUSTOM_TYPE::FXVATBUBBLE, "FXVATBUBBLE"},
    {CUSTOM_TYPE::FXWATERDROP, "FXWATERDROP"},
    {CUSTOM_TYPE::FXWEBBEDEFFECT, "FXWEBBEDEFFECT"},
    {CUSTOM_TYPE::FXWITCHDOCTORHINT, "FXWITCHDOCTORHINT"},
    {CUSTOM_TYPE::GENERATOR, "GENERATOR"},
    {CUSTOM_TYPE::GHIST, "GHIST"},
    {CUSTOM_TYPE::GHOST, "GHOST"},
    {CUSTOM_TYPE::GHOSTBREATH, "GHOSTBREATH"},
    {CUSTOM_TYPE::GIANTCLAMTOP, "GIANTCLAMTOP"},
    {CUSTOM_TYPE::GIANTFISH, "GIANTFISH"},
    {CUSTOM_TYPE::GIANTFLY, "GIANTFLY"},
    {CUSTOM_TYPE::GIANTFROG, "GIANTFROG"},
    {CUSTOM_TYPE::GOLDBAR, "GOLDBAR"},
    {CUSTOM_TYPE::GOLDMONKEY, "GOLDMONKEY"},
    {CUSTOM_TYPE::GRUB, "GRUB"},
    {CUSTOM_TYPE::GUN, "GUN"},
    {CUSTOM_TYPE::HANGANCHOR, "HANGANCHOR"},
    {CUSTOM_TYPE::HANGSPIDER, "HANGSPIDER"},
    {CUSTOM_TYPE::HANGSTRAND, "HANGSTRAND"},
    {CUSTOM_TYPE::HERMITCRAB, "HERMITCRAB"},
    {CUSTOM_TYPE::HONEY, "HONEY"},
    {CUSTOM_TYPE::HORIZONTALFORCEFIELD, "HORIZONTALFORCEFIELD"},
    {CUSTOM_TYPE::HORNEDLIZARD, "HORNEDLIZARD"},
    {CUSTOM_TYPE::HOVERPACK, "HOVERPACK"},
    {CUSTOM_TYPE::HUNDUN, "HUNDUN"},
    {CUSTOM_TYPE::HUNDUNCHEST, "HUNDUNCHEST"},
    {CUSTOM_TYPE::HUNDUNHEAD, "HUNDUNHEAD"},
    {CUSTOM_TYPE::ICESLIDINGSOUND, "ICESLIDINGSOUND"},
    {CUSTOM_TYPE::IDOL, "IDOL"},
    {CUSTOM_TYPE::IMP, "IMP"},
    {CUSTOM_TYPE::JETPACK, "JETPACK"},
    {CUSTOM_TYPE::JIANGSHI, "JIANGSHI"},
    {CUSTOM_TYPE::JUMPDOG, "JUMPDOG"},
    {CUSTOM_TYPE::JUNGLESPEARCOSMETIC, "JUNGLESPEARCOSMETIC"},
    {CUSTOM_TYPE::JUNGLETRAPTRIGGER, "JUNGLETRAPTRIGGER"},
    {CUSTOM_TYPE::KAPALAPOWERUP, "KAPALAPOWERUP"},
    {CUSTOM_TYPE::KINGU, "KINGU"},
    {CUSTOM_TYPE::LAHAMU, "LAHAMU"},
    {CUSTOM_TYPE::LAMASSU, "LAMASSU"},
    {CUSTOM_TYPE::LAMPFLAME, "LAMPFLAME"},
    {CUSTOM_TYPE::LANDMINE, "LANDMINE"},
    {CUSTOM_TYPE::LASERBEAM, "LASERBEAM"},
    {CUSTOM_TYPE::LASERTRAP, "LASERTRAP"},
    {CUSTOM_TYPE::LAVA, "LAVA"},
    {CUSTOM_TYPE::LAVAMANDER, "LAVAMANDER"},
    {CUSTOM_TYPE::LEAF, "LEAF"},
    {CUSTOM_TYPE::LEPRECHAUN, "LEPRECHAUN"},
    {CUSTOM_TYPE::LIGHTARROW, "LIGHTARROW"},
    {CUSTOM_TYPE::LIGHTARROWPLATFORM, "LIGHTARROWPLATFORM"},
    {CUSTOM_TYPE::LIGHTEMITTER, "LIGHTEMITTER"},
    {CUSTOM_TYPE::LIGHTSHOT, "LIGHTSHOT"},
    {CUSTOM_TYPE::LIMBANCHOR, "LIMBANCHOR"},
    {CUSTOM_TYPE::LIQUID, "LIQUID"},
    {CUSTOM_TYPE::LIQUIDSURFACE, "LIQUIDSURFACE"},
    {CUSTOM_TYPE::LOCKEDDOOR, "LOCKEDDOOR"},
    {CUSTOM_TYPE::LOGICALANCHOVYFLOCK, "LOGICALANCHOVYFLOCK"},
    {CUSTOM_TYPE::LOGICALCONVEYORBELTSOUND, "LOGICALCONVEYORBELTSOUND"},
    {CUSTOM_TYPE::LOGICALDOOR, "LOGICALDOOR"},
    {CUSTOM_TYPE::LOGICALDRAIN, "LOGICALDRAIN"},
    {CUSTOM_TYPE::LOGICALLIQUIDSTREAMSOUND, "LOGICALLIQUIDSTREAMSOUND"},
    {CUSTOM_TYPE::LOGICALMINIGAME, "LOGICALMINIGAME"},
    {CUSTOM_TYPE::LOGICALREGENERATINGBLOCK, "LOGICALREGENERATINGBLOCK"},
    {CUSTOM_TYPE::LOGICALSOUND, "LOGICALSOUND"},
    {CUSTOM_TYPE::LOGICALSTATICSOUND, "LOGICALSTATICSOUND"},
    {CUSTOM_TYPE::LOGICALTRAPTRIGGER, "LOGICALTRAPTRIGGER"},
    {CUSTOM_TYPE::MAGMAMAN, "MAGMAMAN"},
    {CUSTOM_TYPE::MAINEXIT, "MAINEXIT"},
    {CUSTOM_TYPE::MANTRAP, "MANTRAP"},
    {CUSTOM_TYPE::MATTOCK, "MATTOCK"},
    {CUSTOM_TYPE::MECH, "MECH"},
    {CUSTOM_TYPE::MEGAJELLYFISH, "MEGAJELLYFISH"},
    {CUSTOM_TYPE::MINIGAMEASTEROID, "MINIGAMEASTEROID"},
    {CUSTOM_TYPE::MINIGAMESHIP, "MINIGAMESHIP"},
    {CUSTOM_TYPE::MINIGAMESHIPOFFSET, "MINIGAMESHIPOFFSET"},
    {CUSTOM_TYPE::MOLE, "MOLE"},
    {CUSTOM_TYPE::MONKEY, "MONKEY"},
    {CUSTOM_TYPE::MONSTER, "MONSTER"},
    {CUSTOM_TYPE::MOSQUITO, "MOSQUITO"},
    {CUSTOM_TYPE::MOTHERSTATUE, "MOTHERSTATUE"},
    {CUSTOM_TYPE::MOUNT, "MOUNT"},
    {CUSTOM_TYPE::MOVABLE, "MOVABLE"},
    {CUSTOM_TYPE::MOVINGICON, "MOVINGICON"},
    {CUSTOM_TYPE::MUMMY, "MUMMY"},
    {CUSTOM_TYPE::MUMMYFLIESSOUND, "MUMMYFLIESSOUND"},
    {CUSTOM_TYPE::NECROMANCER, "NECROMANCER"},
    {CUSTOM_TYPE::NPC, "NPC"},
    {CUSTOM_TYPE::OCTOPUS, "OCTOPUS"},
    {CUSTOM_TYPE::OLMEC, "OLMEC"},
    {CUSTOM_TYPE::OLMECCANNON, "OLMECCANNON"},
    {CUSTOM_TYPE::OLMECFLOATER, "OLMECFLOATER"},
    {CUSTOM_TYPE::OLMITE, "OLMITE"},
    {CUSTOM_TYPE::ONFIREEFFECT, "ONFIREEFFECT"},
    {CUSTOM_TYPE::ORB, "ORB"},
    {CUSTOM_TYPE::OSIRISHAND, "OSIRISHAND"},
    {CUSTOM_TYPE::OSIRISHEAD, "OSIRISHEAD"},
    {CUSTOM_TYPE::OUROBOROCAMERAANCHOR, "OUROBOROCAMERAANCHOR"},
    {CUSTOM_TYPE::OUROBOROCAMERAZOOMIN, "OUROBOROCAMERAZOOMIN"},
    {CUSTOM_TYPE::PALACESIGN, "PALACESIGN"},
    {CUSTOM_TYPE::PARACHUTEPOWERUP, "PARACHUTEPOWERUP"},
    {CUSTOM_TYPE::PET, "PET"},
    {CUSTOM_TYPE::PIPE, "PIPE"},
    {CUSTOM_TYPE::PIPETRAVELERSOUND, "PIPETRAVELERSOUND"},
    {CUSTOM_TYPE::PLAYER, "PLAYER"},
    {CUSTOM_TYPE::PLAYERBAG, "PLAYERBAG"},
    {CUSTOM_TYPE::PLAYERGHOST, "PLAYERGHOST"},
    {CUSTOM_TYPE::POISONEDEFFECT, "POISONEDEFFECT"},
    {CUSTOM_TYPE::POLEDECO, "POLEDECO"},
    {CUSTOM_TYPE::PORTAL, "PORTAL"},
    {CUSTOM_TYPE::POT, "POT"},
    {CUSTOM_TYPE::POWERUP, "POWERUP"},
    {CUSTOM_TYPE::POWERUPCAPABLE, "POWERUPCAPABLE"},
    {CUSTOM_TYPE::PROTOSHOPKEEPER, "PROTOSHOPKEEPER"},
    {CUSTOM_TYPE::PUNISHBALL, "PUNISHBALL"},
    {CUSTOM_TYPE::PUSHBLOCK, "PUSHBLOCK"},
    {CUSTOM_TYPE::QILIN, "QILIN"},
    {CUSTOM_TYPE::QUICKSAND, "QUICKSAND"},
    {CUSTOM_TYPE::QUICKSANDSOUND, "QUICKSANDSOUND"},
    {CUSTOM_TYPE::QUILLBACK, "QUILLBACK"},
    {CUSTOM_TYPE::REGENBLOCK, "REGENBLOCK"},
    {CUSTOM_TYPE::ROBOT, "ROBOT"},
    {CUSTOM_TYPE::ROCKDOG, "ROCKDOG"},
    {CUSTOM_TYPE::ROLLINGITEM, "ROLLINGITEM"},
    {CUSTOM_TYPE::ROOMLIGHT, "ROOMLIGHT"},
    {CUSTOM_TYPE::ROOMOWNER, "ROOMOWNER"},
    {CUSTOM_TYPE::RUBBLE, "RUBBLE"},
    {CUSTOM_TYPE::SCARAB, "SCARAB"},
    {CUSTOM_TYPE::SCEPTERSHOT, "SCEPTERSHOT"},
    {CUSTOM_TYPE::SCORPION, "SCORPION"},
    {CUSTOM_TYPE::SHIELD, "SHIELD"},
    {CUSTOM_TYPE::SHOOTINGSTARSPAWNER, "SHOOTINGSTARSPAWNER"},
    {CUSTOM_TYPE::SHOPKEEPER, "SHOPKEEPER"},
    {CUSTOM_TYPE::SKELETON, "SKELETON"},
    {CUSTOM_TYPE::SKULLDROPTRAP, "SKULLDROPTRAP"},
    {CUSTOM_TYPE::SLEEPBUBBLE, "SLEEPBUBBLE"},
    {CUSTOM_TYPE::SLIDINGWALLCEILING, "SLIDINGWALLCEILING"},
    {CUSTOM_TYPE::SNAPTRAP, "SNAPTRAP"},
    {CUSTOM_TYPE::SORCERESS, "SORCERESS"},
    {CUSTOM_TYPE::SOUNDSHOT, "SOUNDSHOT"},
    {CUSTOM_TYPE::SPARK, "SPARK"},
    {CUSTOM_TYPE::SPARKTRAP, "SPARKTRAP"},
    {CUSTOM_TYPE::SPEAR, "SPEAR"},
    {CUSTOM_TYPE::SPECIALSHOT, "SPECIALSHOT"},
    {CUSTOM_TYPE::SPIDER, "SPIDER"},
    {CUSTOM_TYPE::SPIKEBALLTRAP, "SPIKEBALLTRAP"},
    {CUSTOM_TYPE::SPLASHBUBBLEGENERATOR, "SPLASHBUBBLEGENERATOR"},
    {CUSTOM_TYPE::STICKYTRAP, "STICKYTRAP"},
    {CUSTOM_TYPE::STRETCHCHAIN, "STRETCHCHAIN"},
    {CUSTOM_TYPE::SWITCH, "SWITCH"},
    {CUSTOM_TYPE::TADPOLE, "TADPOLE"},
    {CUSTOM_TYPE::TELEPORTER, "TELEPORTER"},
    {CUSTOM_TYPE::TELEPORTERBACKPACK, "TELEPORTERBACKPACK"},
    {CUSTOM_TYPE::TELEPORTINGBORDER, "TELEPORTINGBORDER"},
    {CUSTOM_TYPE::TELESCOPE, "TELESCOPE"},
    {CUSTOM_TYPE::TENTACLE, "TENTACLE"},
    {CUSTOM_TYPE::TENTACLEBOTTOM, "TENTACLEBOTTOM"},
    {CUSTOM_TYPE::TERRA, "TERRA"},
    {CUSTOM_TYPE::THINICE, "THINICE"},
    {CUSTOM_TYPE::TIAMAT, "TIAMAT"},
    {CUSTOM_TYPE::TIAMATSHOT, "TIAMATSHOT"},
    {CUSTOM_TYPE::TIMEDFORCEFIELD, "TIMEDFORCEFIELD"},
    {CUSTOM_TYPE::TIMEDPOWDERKEG, "TIMEDPOWDERKEG"},
    {CUSTOM_TYPE::TIMEDSHOT, "TIMEDSHOT"},
    {CUSTOM_TYPE::TORCH, "TORCH"},
    {CUSTOM_TYPE::TORCHFLAME, "TORCHFLAME"},
    {CUSTOM_TYPE::TOTEMTRAP, "TOTEMTRAP"},
    {CUSTOM_TYPE::TRANSFERFLOOR, "TRANSFERFLOOR"},
    {CUSTOM_TYPE::TRAPPART, "TRAPPART"},
    {CUSTOM_TYPE::TREASURE, "TREASURE"},
    {CUSTOM_TYPE::TREASUREHOOK, "TREASUREHOOK"},
    {CUSTOM_TYPE::TRUECROWNPOWERUP, "TRUECROWNPOWERUP"},
    {CUSTOM_TYPE::TUN, "TUN"},
    {CUSTOM_TYPE::TV, "TV"},
    {CUSTOM_TYPE::UDJATSOCKET, "UDJATSOCKET"},
    {CUSTOM_TYPE::UFO, "UFO"},
    {CUSTOM_TYPE::UNCHAINEDSPIKEBALL, "UNCHAINEDSPIKEBALL"},
    {CUSTOM_TYPE::USHABTI, "USHABTI"},
    {CUSTOM_TYPE::VAMPIRE, "VAMPIRE"},
    {CUSTOM_TYPE::VANHORSING, "VANHORSING"},
    {CUSTOM_TYPE::VLAD, "VLAD"},
    {CUSTOM_TYPE::VLADSCAPE, "VLADSCAPE"},
    {CUSTOM_TYPE::WADDLER, "WADDLER"},
    {CUSTOM_TYPE::WALKINGMONSTER, "WALKINGMONSTER"},
    {CUSTOM_TYPE::WALLTORCH, "WALLTORCH"},
    {CUSTOM_TYPE::WEBSHOT, "WEBSHOT"},
    {CUSTOM_TYPE::WETEFFECT, "WETEFFECT"},
    {CUSTOM_TYPE::WITCHDOCTOR, "WITCHDOCTOR"},
    {CUSTOM_TYPE::WITCHDOCTORSKULL, "WITCHDOCTORSKULL"},
    {CUSTOM_TYPE::WOODENLOGTRAP, "WOODENLOGTRAP"},
    {CUSTOM_TYPE::YAMA, "YAMA"},
    {CUSTOM_TYPE::YANG, "YANG"},
    {CUSTOM_TYPE::YELLOWCAPE, "YELLOWCAPE"},
    {CUSTOM_TYPE::YETIKING, "YETIKING"},
    {CUSTOM_TYPE::YETIQUEEN, "YETIQUEEN"},
    {CUSTOM_TYPE::PURCHASABLE, "PURCHASABLE"},
};

template <CUSTOM_TYPE CustomEntityType, class... StrArgs>
requires(std::is_same_v<const char*, StrArgs> && ...)
std::span<const ENT_TYPE> make_custom_entity_type_list(StrArgs... ent_type_ids)
{
    static const std::array<ENT_TYPE, sizeof...(StrArgs)> s_entity_types{
        to_id(ent_type_ids)...,
    };
    return {s_entity_types.begin(), s_entity_types.end()};
}

std::map<CUSTOM_TYPE, std::vector<ENT_TYPE>> user_custom_types;
uint32_t g_last_custom_id = (uint32_t)custom_type_max;

std::span<const ENT_TYPE> get_custom_entity_types(CUSTOM_TYPE type)
{
    if (type < CUSTOM_TYPE::ACIDBUBBLE)
        return {};

    switch (type)
    {
    case CUSTOM_TYPE::ACIDBUBBLE:
        return make_custom_entity_type_list<CUSTOM_TYPE::ACIDBUBBLE>("ENT_TYPE_ITEM_CRABMAN_ACIDBUBBLE");
    case CUSTOM_TYPE::ALIEN:
        return make_custom_entity_type_list<CUSTOM_TYPE::ALIEN>("ENT_TYPE_MONS_ALIEN");
    case CUSTOM_TYPE::ALTAR:
        return make_custom_entity_type_list<CUSTOM_TYPE::ALTAR>(
            "ENT_TYPE_FLOOR_ALTAR",
            "ENT_TYPE_FLOOR_DUAT_ALTAR",
            "ENT_TYPE_FLOOR_EGGPLANT_ALTAR");
    case CUSTOM_TYPE::AMMIT:
        return make_custom_entity_type_list<CUSTOM_TYPE::AMMIT>("ENT_TYPE_MONS_AMMIT");
    case CUSTOM_TYPE::ANKHPOWERUP:
        return make_custom_entity_type_list<CUSTOM_TYPE::ANKHPOWERUP>("ENT_TYPE_ITEM_POWERUP_ANKH");
    case CUSTOM_TYPE::ANUBIS:
        return make_custom_entity_type_list<CUSTOM_TYPE::ANUBIS>(
            "ENT_TYPE_MONS_ANUBIS",
            "ENT_TYPE_MONS_ANUBIS2");
    case CUSTOM_TYPE::APEPHEAD:
        return make_custom_entity_type_list<CUSTOM_TYPE::APEPHEAD>("ENT_TYPE_MONS_APEP_HEAD");
    case CUSTOM_TYPE::APEPPART:
        return make_custom_entity_type_list<CUSTOM_TYPE::APEPPART>(
            "ENT_TYPE_MONS_APEP_HEAD",
            "ENT_TYPE_MONS_APEP_BODY",
            "ENT_TYPE_MONS_APEP_TAIL");
    case CUSTOM_TYPE::ARROW:
        return make_custom_entity_type_list<CUSTOM_TYPE::ARROW>(
            "ENT_TYPE_ITEM_WOODEN_ARROW",
            "ENT_TYPE_ITEM_METAL_ARROW",
            "ENT_TYPE_ITEM_LIGHT_ARROW");
    case CUSTOM_TYPE::ARROWTRAP:
        return make_custom_entity_type_list<CUSTOM_TYPE::ARROWTRAP>(
            "ENT_TYPE_FLOOR_ARROW_TRAP",
            "ENT_TYPE_FLOOR_POISONED_ARROW_TRAP");
    case CUSTOM_TYPE::AXOLOTL:
        return make_custom_entity_type_list<CUSTOM_TYPE::AXOLOTL>("ENT_TYPE_MOUNT_AXOLOTL");
    case CUSTOM_TYPE::AXOLOTLSHOT:
        return make_custom_entity_type_list<CUSTOM_TYPE::AXOLOTLSHOT>("ENT_TYPE_ITEM_AXOLOTL_BUBBLESHOT");
    case CUSTOM_TYPE::BACKPACK:
        return make_custom_entity_type_list<CUSTOM_TYPE::BACKPACK>(
            "ENT_TYPE_ITEM_CAPE",
            "ENT_TYPE_ITEM_VLADS_CAPE",
            "ENT_TYPE_ITEM_JETPACK",
            "ENT_TYPE_ITEM_JETPACK_MECH",
            "ENT_TYPE_ITEM_TELEPORTER_BACKPACK",
            "ENT_TYPE_ITEM_HOVERPACK",
            "ENT_TYPE_ITEM_POWERPACK");
    case CUSTOM_TYPE::BAT:
        return make_custom_entity_type_list<CUSTOM_TYPE::BAT>("ENT_TYPE_MONS_BAT");
    case CUSTOM_TYPE::BEE:
        return make_custom_entity_type_list<CUSTOM_TYPE::BEE>(
            "ENT_TYPE_MONS_BEE",
            "ENT_TYPE_MONS_QUEENBEE");
    case CUSTOM_TYPE::BEG:
        return make_custom_entity_type_list<CUSTOM_TYPE::BEG>("ENT_TYPE_MONS_HUNDUNS_SERVANT");
    case CUSTOM_TYPE::BGBACKLAYERDOOR:
        return make_custom_entity_type_list<CUSTOM_TYPE::BGBACKLAYERDOOR>("ENT_TYPE_BG_DOOR_BACK_LAYER");
    case CUSTOM_TYPE::BGEGGSHIPROOM:
        return make_custom_entity_type_list<CUSTOM_TYPE::BGEGGSHIPROOM>("ENT_TYPE_BG_EGGSHIP_ROOM");
    case CUSTOM_TYPE::BGFLOATINGDEBRIS:
        return make_custom_entity_type_list<CUSTOM_TYPE::BGFLOATINGDEBRIS>(
            "ENT_TYPE_BG_DUAT_FLOATINGDEBRIS",
            "ENT_TYPE_BG_DUAT_FARFLOATINGDEBRIS",
            "ENT_TYPE_BG_COSMIC_FLOATINGDEBRIS",
            "ENT_TYPE_BG_COSMIC_FARFLOATINGDEBRIS");
    case CUSTOM_TYPE::BGMOVINGSTAR:
        return make_custom_entity_type_list<CUSTOM_TYPE::BGMOVINGSTAR>("ENT_TYPE_BG_SURFACE_MOVING_STAR");
    case CUSTOM_TYPE::BGRELATIVEELEMENT:
        return make_custom_entity_type_list<CUSTOM_TYPE::BGRELATIVEELEMENT>(
            "ENT_TYPE_BG_SURFACE_SHOOTING_STAR",
            "ENT_TYPE_BG_SURFACE_SHOOTING_STAR_TRAIL",
            "ENT_TYPE_BG_SURFACE_SHOOTING_STAR_TRAIL_PARTICLE",
            "ENT_TYPE_BG_SURFACE_NEBULA",
            "ENT_TYPE_BG_SURFACE_LAYER",
            "ENT_TYPE_BG_SURFACE_ENTITY",
            "ENT_TYPE_BG_SURFACE_OLMEC_LAYER",
            "ENT_TYPE_BG_DUAT_LAYER",
            "ENT_TYPE_BG_DUAT_PYRAMID_LAYER",
            "ENT_TYPE_BG_DUAT_FLOATINGDEBRIS",
            "ENT_TYPE_BG_DUAT_FARFLOATINGDEBRIS",
            "ENT_TYPE_BG_COSMIC_FLOATINGDEBRIS",
            "ENT_TYPE_BG_COSMIC_FARFLOATINGDEBRIS");
    case CUSTOM_TYPE::BGSHOOTINGSTAR:
        return make_custom_entity_type_list<CUSTOM_TYPE::BGSHOOTINGSTAR>("ENT_TYPE_BG_SURFACE_SHOOTING_STAR");
    case CUSTOM_TYPE::BGSHOPENTRENCE:
        return make_custom_entity_type_list<CUSTOM_TYPE::BGSHOPENTRENCE>("ENT_TYPE_BG_SHOP_ENTRANCEDOOR");
    case CUSTOM_TYPE::BGSHOPKEEPERPRIME:
        return make_custom_entity_type_list<CUSTOM_TYPE::BGSHOPKEEPERPRIME>("ENT_TYPE_BG_VAT_SHOPKEEPER_PRIME");
    case CUSTOM_TYPE::BGSURFACELAYER:
        return make_custom_entity_type_list<CUSTOM_TYPE::BGSURFACELAYER>(
            "ENT_TYPE_BG_SURFACE_LAYER",
            "ENT_TYPE_BG_SURFACE_ENTITY",
            "ENT_TYPE_BG_SURFACE_OLMEC_LAYER",
            "ENT_TYPE_BG_DUAT_LAYER",
            "ENT_TYPE_BG_DUAT_PYRAMID_LAYER",
            "ENT_TYPE_BG_DUAT_FLOATINGDEBRIS",
            "ENT_TYPE_BG_DUAT_FARFLOATINGDEBRIS",
            "ENT_TYPE_BG_COSMIC_FLOATINGDEBRIS",
            "ENT_TYPE_BG_COSMIC_FARFLOATINGDEBRIS");
    case CUSTOM_TYPE::BGSURFACESTAR:
        return make_custom_entity_type_list<CUSTOM_TYPE::BGSURFACESTAR>(
            "ENT_TYPE_BG_SURFACE_STAR",
            "ENT_TYPE_BG_SURFACE_MOVING_STAR",
            "ENT_TYPE_BG_CONSTELLATION_STAR",
            "ENT_TYPE_BG_CONSTELLATION_CONNECTION");
    case CUSTOM_TYPE::BGTUTORIALSIGN:
        return make_custom_entity_type_list<CUSTOM_TYPE::BGTUTORIALSIGN>(
            "ENT_TYPE_BG_TUTORIAL_SIGN_BACK",
            "ENT_TYPE_BG_TUTORIAL_SIGN_FRONT");
    case CUSTOM_TYPE::BIGSPEARTRAP:
        return make_custom_entity_type_list<CUSTOM_TYPE::BIGSPEARTRAP>("ENT_TYPE_FLOOR_BIGSPEAR_TRAP");
    case CUSTOM_TYPE::BIRDIES:
        return make_custom_entity_type_list<CUSTOM_TYPE::BIRDIES>("ENT_TYPE_FX_BIRDIES");
    case CUSTOM_TYPE::BODYGUARD:
        return make_custom_entity_type_list<CUSTOM_TYPE::BODYGUARD>("ENT_TYPE_MONS_BODYGUARD");
    case CUSTOM_TYPE::BOMB:
        return make_custom_entity_type_list<CUSTOM_TYPE::BOMB>(
            "ENT_TYPE_ITEM_BOMB",
            "ENT_TYPE_ITEM_PASTEBOMB");
    case CUSTOM_TYPE::BONEBLOCK:
        return make_custom_entity_type_list<CUSTOM_TYPE::BONEBLOCK>("ENT_TYPE_ACTIVEFLOOR_BONEBLOCK");
    case CUSTOM_TYPE::BOOMBOX:
        return make_custom_entity_type_list<CUSTOM_TYPE::BOOMBOX>("ENT_TYPE_ITEM_BOOMBOX");
    case CUSTOM_TYPE::BOOMERANG:
        return make_custom_entity_type_list<CUSTOM_TYPE::BOOMERANG>("ENT_TYPE_ITEM_BOOMERANG");
    case CUSTOM_TYPE::BOULDER:
        return make_custom_entity_type_list<CUSTOM_TYPE::BOULDER>("ENT_TYPE_ACTIVEFLOOR_BOULDER");
    case CUSTOM_TYPE::BOULDERSPAWNER:
        return make_custom_entity_type_list<CUSTOM_TYPE::BOULDERSPAWNER>("ENT_TYPE_LOGICAL_BOULDERSPAWNER");
    case CUSTOM_TYPE::BULLET:
        return make_custom_entity_type_list<CUSTOM_TYPE::BULLET>("ENT_TYPE_ITEM_BULLET");
    case CUSTOM_TYPE::BURNINGROPEEFFECT:
        return make_custom_entity_type_list<CUSTOM_TYPE::BURNINGROPEEFFECT>("ENT_TYPE_LOGICAL_BURNING_ROPE_EFFECT");
    case CUSTOM_TYPE::BUTTON:
        return make_custom_entity_type_list<CUSTOM_TYPE::BUTTON>("ENT_TYPE_FX_BUTTON");
    case CUSTOM_TYPE::CAMERAFLASH:
        return make_custom_entity_type_list<CUSTOM_TYPE::CAMERAFLASH>("ENT_TYPE_LOGICAL_CAMERA_FLASH");
    case CUSTOM_TYPE::CAPE:
        return make_custom_entity_type_list<CUSTOM_TYPE::CAPE>(
            "ENT_TYPE_ITEM_CAPE",
            "ENT_TYPE_ITEM_VLADS_CAPE");
    case CUSTOM_TYPE::CATMUMMY:
        return make_custom_entity_type_list<CUSTOM_TYPE::CATMUMMY>("ENT_TYPE_MONS_CATMUMMY");
    case CUSTOM_TYPE::CAVEMAN:
        return make_custom_entity_type_list<CUSTOM_TYPE::CAVEMAN>("ENT_TYPE_MONS_CAVEMAN");
    case CUSTOM_TYPE::CAVEMANSHOPKEEPER:
        return make_custom_entity_type_list<CUSTOM_TYPE::CAVEMANSHOPKEEPER>("ENT_TYPE_MONS_CAVEMAN_SHOPKEEPER");
    case CUSTOM_TYPE::CHAIN:
        return make_custom_entity_type_list<CUSTOM_TYPE::CHAIN>(
            "ENT_TYPE_ITEM_CHAIN",
            "ENT_TYPE_ITEM_CHAIN_LASTPIECE",
            "ENT_TYPE_ITEM_SLIDINGWALL_CHAIN",
            "ENT_TYPE_ITEM_SLIDINGWALL_CHAIN_LASTPIECE",
            "ENT_TYPE_ITEM_STICKYTRAP_PIECE",
            "ENT_TYPE_ITEM_STICKYTRAP_LASTPIECE",
            "ENT_TYPE_ITEM_TENTACLE",
            "ENT_TYPE_ITEM_TENTACLE_PIECE",
            "ENT_TYPE_ITEM_TENTACLE_LAST_PIECE");
    case CUSTOM_TYPE::CHAINEDPUSHBLOCK:
        return make_custom_entity_type_list<CUSTOM_TYPE::CHAINEDPUSHBLOCK>("ENT_TYPE_ACTIVEFLOOR_CHAINEDPUSHBLOCK");
    case CUSTOM_TYPE::CHEST:
        return make_custom_entity_type_list<CUSTOM_TYPE::CHEST>("ENT_TYPE_ITEM_CHEST");
    case CUSTOM_TYPE::CINEMATICANCHOR:
        return make_custom_entity_type_list<CUSTOM_TYPE::CINEMATICANCHOR>("ENT_TYPE_LOGICAL_CINEMATIC_ANCHOR");
    case CUSTOM_TYPE::CITYOFGOLDDOOR:
        return make_custom_entity_type_list<CUSTOM_TYPE::CITYOFGOLDDOOR>("ENT_TYPE_FLOOR_DOOR_COG");
    case CUSTOM_TYPE::CLAMBASE:
        return make_custom_entity_type_list<CUSTOM_TYPE::CLAMBASE>("ENT_TYPE_ACTIVEFLOOR_GIANTCLAM_BASE");
    case CUSTOM_TYPE::CLAW:
        return make_custom_entity_type_list<CUSTOM_TYPE::CLAW>("ENT_TYPE_ITEM_CRABMAN_CLAW");
    case CUSTOM_TYPE::CLIMBABLEROPE:
        return make_custom_entity_type_list<CUSTOM_TYPE::CLIMBABLEROPE>(
            "ENT_TYPE_ITEM_CLIMBABLE_ROPE",
            "ENT_TYPE_ITEM_UNROLLED_ROPE");
    case CUSTOM_TYPE::CLONEGUNSHOT:
        return make_custom_entity_type_list<CUSTOM_TYPE::CLONEGUNSHOT>("ENT_TYPE_ITEM_CLONEGUNSHOT");
    case CUSTOM_TYPE::COBRA:
        return make_custom_entity_type_list<CUSTOM_TYPE::COBRA>("ENT_TYPE_MONS_COBRA");
    case CUSTOM_TYPE::COFFIN:
        return make_custom_entity_type_list<CUSTOM_TYPE::COFFIN>(
            "ENT_TYPE_ITEM_COFFIN",
            "ENT_TYPE_ITEM_ANUBIS_COFFIN");
    case CUSTOM_TYPE::COIN:
        return make_custom_entity_type_list<CUSTOM_TYPE::COIN>("ENT_TYPE_ITEM_GOLDCOIN");
    case CUSTOM_TYPE::CONTAINER:
        return make_custom_entity_type_list<CUSTOM_TYPE::CONTAINER>(
            "ENT_TYPE_ITEM_CRATE",
            "ENT_TYPE_ITEM_DMCRATE",
            "ENT_TYPE_ITEM_PRESENT",
            "ENT_TYPE_ITEM_GHIST_PRESENT",
            "ENT_TYPE_ITEM_ALIVE_EMBEDDED_ON_ICE",
            "ENT_TYPE_ITEM_POT");
    case CUSTOM_TYPE::CONVEYORBELT:
        return make_custom_entity_type_list<CUSTOM_TYPE::CONVEYORBELT>(
            "ENT_TYPE_FLOOR_CONVEYORBELT_LEFT",
            "ENT_TYPE_FLOOR_CONVEYORBELT_RIGHT");
    case CUSTOM_TYPE::COOKFIRE:
        return make_custom_entity_type_list<CUSTOM_TYPE::COOKFIRE>("ENT_TYPE_ITEM_COOKFIRE");
    case CUSTOM_TYPE::CRABMAN:
        return make_custom_entity_type_list<CUSTOM_TYPE::CRABMAN>("ENT_TYPE_MONS_CRABMAN");
    case CUSTOM_TYPE::CRITTER:
        return make_custom_entity_type_list<CUSTOM_TYPE::CRITTER>(
            "ENT_TYPE_MONS_CRITTERDUNGBEETLE",
            "ENT_TYPE_MONS_CRITTERBUTTERFLY",
            "ENT_TYPE_MONS_CRITTERSNAIL",
            "ENT_TYPE_MONS_CRITTERFISH",
            "ENT_TYPE_MONS_CRITTERANCHOVY",
            "ENT_TYPE_MONS_CRITTERCRAB",
            "ENT_TYPE_MONS_CRITTERLOCUST",
            "ENT_TYPE_MONS_CRITTERPENGUIN",
            "ENT_TYPE_MONS_CRITTERFIREFLY",
            "ENT_TYPE_MONS_CRITTERDRONE",
            "ENT_TYPE_MONS_CRITTERSLIME");
    case CUSTOM_TYPE::CRITTERBEETLE:
        return make_custom_entity_type_list<CUSTOM_TYPE::CRITTERBEETLE>("ENT_TYPE_MONS_CRITTERDUNGBEETLE");
    case CUSTOM_TYPE::CRITTERBUTTERFLY:
        return make_custom_entity_type_list<CUSTOM_TYPE::CRITTERBUTTERFLY>("ENT_TYPE_MONS_CRITTERBUTTERFLY");
    case CUSTOM_TYPE::CRITTERCRAB:
        return make_custom_entity_type_list<CUSTOM_TYPE::CRITTERCRAB>("ENT_TYPE_MONS_CRITTERCRAB");
    case CUSTOM_TYPE::CRITTERDRONE:
        return make_custom_entity_type_list<CUSTOM_TYPE::CRITTERDRONE>("ENT_TYPE_MONS_CRITTERDRONE");
    case CUSTOM_TYPE::CRITTERFIREFLY:
        return make_custom_entity_type_list<CUSTOM_TYPE::CRITTERFIREFLY>("ENT_TYPE_MONS_CRITTERFIREFLY");
    case CUSTOM_TYPE::CRITTERFISH:
        return make_custom_entity_type_list<CUSTOM_TYPE::CRITTERFISH>("ENT_TYPE_MONS_CRITTERFISH");
    case CUSTOM_TYPE::CRITTERLOCUST:
        return make_custom_entity_type_list<CUSTOM_TYPE::CRITTERLOCUST>("ENT_TYPE_MONS_CRITTERLOCUST");
    case CUSTOM_TYPE::CRITTERPENGUIN:
        return make_custom_entity_type_list<CUSTOM_TYPE::CRITTERPENGUIN>("ENT_TYPE_MONS_CRITTERPENGUIN");
    case CUSTOM_TYPE::CRITTERSLIME:
        return make_custom_entity_type_list<CUSTOM_TYPE::CRITTERSLIME>("ENT_TYPE_MONS_CRITTERSLIME");
    case CUSTOM_TYPE::CRITTERSNAIL:
        return make_custom_entity_type_list<CUSTOM_TYPE::CRITTERSNAIL>("ENT_TYPE_MONS_CRITTERSNAIL");
    case CUSTOM_TYPE::CROCMAN:
        return make_custom_entity_type_list<CUSTOM_TYPE::CROCMAN>("ENT_TYPE_MONS_CROCMAN");
    case CUSTOM_TYPE::CROSSBEAM:
        return make_custom_entity_type_list<CUSTOM_TYPE::CROSSBEAM>("ENT_TYPE_DECORATION_CROSS_BEAM");
    case CUSTOM_TYPE::CRUSHTRAP:
        return make_custom_entity_type_list<CUSTOM_TYPE::CRUSHTRAP>(
            "ENT_TYPE_ACTIVEFLOOR_CRUSH_TRAP",
            "ENT_TYPE_ACTIVEFLOOR_CRUSH_TRAP_LARGE");
    case CUSTOM_TYPE::CURSEDEFFECT:
        return make_custom_entity_type_list<CUSTOM_TYPE::CURSEDEFFECT>("ENT_TYPE_LOGICAL_CURSED_EFFECT");
    case CUSTOM_TYPE::CURSEDPOT:
        return make_custom_entity_type_list<CUSTOM_TYPE::CURSEDPOT>("ENT_TYPE_ITEM_CURSEDPOT");
    case CUSTOM_TYPE::DECORATEDDOOR:
        return make_custom_entity_type_list<CUSTOM_TYPE::DECORATEDDOOR>(
            "ENT_TYPE_FLOOR_DOOR_COG",
            "ENT_TYPE_FLOOR_DOOR_EGGPLANT_WORLD");
    case CUSTOM_TYPE::DECOREGENERATINGBLOCK:
        return make_custom_entity_type_list<CUSTOM_TYPE::DECOREGENERATINGBLOCK>(
            "ENT_TYPE_DECORATION_REGENERATING_SMALL_BLOCK",
            "ENT_TYPE_DECORATION_REGENERATING_BORDER");
    case CUSTOM_TYPE::DESTRUCTIBLEBG:
        return make_custom_entity_type_list<CUSTOM_TYPE::DESTRUCTIBLEBG>("ENT_TYPE_DECORATION_DUAT_DESTRUCTIBLE_BG");
    case CUSTOM_TYPE::DMALIENBLAST:
        return make_custom_entity_type_list<CUSTOM_TYPE::DMALIENBLAST>("ENT_TYPE_LOGICAL_DM_ALIEN_BLAST");
    case CUSTOM_TYPE::DMSPAWNING:
        return make_custom_entity_type_list<CUSTOM_TYPE::DMSPAWNING>(
            "ENT_TYPE_LOGICAL_DM_CRATE_SPAWNING",
            "ENT_TYPE_LOGICAL_DM_IDOL_SPAWNING");
    case CUSTOM_TYPE::DOOR:
        return make_custom_entity_type_list<CUSTOM_TYPE::DOOR>(
            "ENT_TYPE_FLOOR_DOOR_ENTRANCE",
            "ENT_TYPE_FLOOR_DOOR_EXIT",
            "ENT_TYPE_FLOOR_DOOR_MAIN_EXIT",
            "ENT_TYPE_FLOOR_DOOR_STARTING_EXIT",
            "ENT_TYPE_FLOOR_DOOR_LAYER",
            "ENT_TYPE_FLOOR_DOOR_LAYER_DROP_HELD",
            "ENT_TYPE_FLOOR_DOOR_GHISTSHOP",
            "ENT_TYPE_FLOOR_DOOR_LOCKED",
            "ENT_TYPE_FLOOR_DOOR_LOCKED_PEN",
            "ENT_TYPE_FLOOR_DOOR_COG",
            "ENT_TYPE_FLOOR_DOOR_MOAI_STATUE",
            "ENT_TYPE_FLOOR_DOOR_EGGSHIP",
            "ENT_TYPE_FLOOR_DOOR_EGGSHIP_ATREZZO",
            "ENT_TYPE_FLOOR_DOOR_EGGSHIP_ROOM",
            "ENT_TYPE_FLOOR_DOOR_EGGPLANT_WORLD");
    case CUSTOM_TYPE::DRILL:
        return make_custom_entity_type_list<CUSTOM_TYPE::DRILL>("ENT_TYPE_ACTIVEFLOOR_DRILL");
    case CUSTOM_TYPE::DUSTWALLAPEP:
        return make_custom_entity_type_list<CUSTOM_TYPE::DUSTWALLAPEP>("ENT_TYPE_LOGICAL_DUSTWALL_APEP");
    case CUSTOM_TYPE::EGGPLANTMINISTER:
        return make_custom_entity_type_list<CUSTOM_TYPE::EGGPLANTMINISTER>("ENT_TYPE_MONS_EGGPLANT_MINISTER");
    case CUSTOM_TYPE::EGGPLANTTHROWER:
        return make_custom_entity_type_list<CUSTOM_TYPE::EGGPLANTTHROWER>("ENT_TYPE_LOGICAL_EGGPLANT_THROWER");
    case CUSTOM_TYPE::EGGSAC:
        return make_custom_entity_type_list<CUSTOM_TYPE::EGGSAC>("ENT_TYPE_ITEM_EGGSAC");
    case CUSTOM_TYPE::EGGSHIPCENTERJETFLAME:
        return make_custom_entity_type_list<CUSTOM_TYPE::EGGSHIPCENTERJETFLAME>("ENT_TYPE_FX_EGGSHIP_CENTERJETFLAME");
    case CUSTOM_TYPE::EGGSHIPDOOR:
        return make_custom_entity_type_list<CUSTOM_TYPE::EGGSHIPDOOR>(
            "ENT_TYPE_FLOOR_DOOR_EGGSHIP",
            "ENT_TYPE_FLOOR_DOOR_EGGSHIP_ATREZZO",
            "ENT_TYPE_FLOOR_DOOR_EGGSHIP_ROOM");
    case CUSTOM_TYPE::EGGSHIPDOORS:
        return make_custom_entity_type_list<CUSTOM_TYPE::EGGSHIPDOORS>("ENT_TYPE_FLOOR_DOOR_EGGSHIP");
    case CUSTOM_TYPE::ELEVATOR:
        return make_custom_entity_type_list<CUSTOM_TYPE::ELEVATOR>("ENT_TYPE_ACTIVEFLOOR_ELEVATOR");
    case CUSTOM_TYPE::EMPRESSGRAVE:
        return make_custom_entity_type_list<CUSTOM_TYPE::EMPRESSGRAVE>("ENT_TYPE_ITEM_EMPRESS_GRAVE");
    case CUSTOM_TYPE::ENTITY:
        return make_custom_entity_type_list<CUSTOM_TYPE::ENTITY>();
    case CUSTOM_TYPE::EXCALIBUR:
        return make_custom_entity_type_list<CUSTOM_TYPE::EXCALIBUR>("ENT_TYPE_ITEM_EXCALIBUR");
    case CUSTOM_TYPE::EXITDOOR:
        return make_custom_entity_type_list<CUSTOM_TYPE::EXITDOOR>(
            "ENT_TYPE_FLOOR_DOOR_EXIT",
            "ENT_TYPE_FLOOR_DOOR_MAIN_EXIT",
            "ENT_TYPE_FLOOR_DOOR_STARTING_EXIT",
            "ENT_TYPE_FLOOR_DOOR_COG",
            "ENT_TYPE_FLOOR_DOOR_EGGPLANT_WORLD");
    case CUSTOM_TYPE::EXPLOSION:
        return make_custom_entity_type_list<CUSTOM_TYPE::EXPLOSION>(
            "ENT_TYPE_FX_EXPLOSION",
            "ENT_TYPE_FX_POWEREDEXPLOSION",
            "ENT_TYPE_FX_MODERNEXPLOSION");
    case CUSTOM_TYPE::FALLINGPLATFORM:
        return make_custom_entity_type_list<CUSTOM_TYPE::FALLINGPLATFORM>("ENT_TYPE_ACTIVEFLOOR_FALLING_PLATFORM");
    case CUSTOM_TYPE::FIREBALL:
        return make_custom_entity_type_list<CUSTOM_TYPE::FIREBALL>(
            "ENT_TYPE_ITEM_FIREBALL",
            "ENT_TYPE_ITEM_HUNDUN_FIREBALL");
    case CUSTOM_TYPE::FIREBUG:
        return make_custom_entity_type_list<CUSTOM_TYPE::FIREBUG>("ENT_TYPE_MONS_FIREBUG");
    case CUSTOM_TYPE::FIREBUGUNCHAINED:
        return make_custom_entity_type_list<CUSTOM_TYPE::FIREBUGUNCHAINED>("ENT_TYPE_MONS_FIREBUG_UNCHAINED");
    case CUSTOM_TYPE::FIREFROG:
        return make_custom_entity_type_list<CUSTOM_TYPE::FIREFROG>("ENT_TYPE_MONS_FIREFROG");
    case CUSTOM_TYPE::FISH:
        return make_custom_entity_type_list<CUSTOM_TYPE::FISH>("ENT_TYPE_MONS_FISH");
    case CUSTOM_TYPE::FLAME:
        return make_custom_entity_type_list<CUSTOM_TYPE::FLAME>(
            "ENT_TYPE_ITEM_WHIP_FLAME",
            "ENT_TYPE_ITEM_SPARK",
            "ENT_TYPE_ITEM_FLAMETHROWER_FIREBALL",
            "ENT_TYPE_ITEM_WALLTORCHFLAME",
            "ENT_TYPE_ITEM_TORCHFLAME",
            "ENT_TYPE_ITEM_LAMPFLAME",
            "ENT_TYPE_FX_SMALLFLAME");
    case CUSTOM_TYPE::FLAMESIZE:
        return make_custom_entity_type_list<CUSTOM_TYPE::FLAMESIZE>(
            "ENT_TYPE_ITEM_WHIP_FLAME",
            "ENT_TYPE_ITEM_WALLTORCHFLAME");
    case CUSTOM_TYPE::FLOOR:
    {
        const static std::vector<ENT_TYPE> types = []()
        {
            auto idx = to_id("ENT_TYPE_FLOOR_BORDERTILE");
            const auto end = to_id("ENT_TYPE_FLOORSTYLED_GUTS") + 1;

            std::vector<ENT_TYPE> result;
            result.reserve(end - idx + 2);
            for (; idx < end; idx++)
                result.push_back(idx);

            result.push_back(to_id("ENT_TYPE_EMBED_GOLD"));
            result.push_back(to_id("ENT_TYPE_EMBED_GOLD_BIG"));

            return result;
        }();
        return {types.begin(), types.end()};
    }
    case CUSTOM_TYPE::FLY:
        return make_custom_entity_type_list<CUSTOM_TYPE::FLY>("ENT_TYPE_ITEM_FLY");
    case CUSTOM_TYPE::FLYHEAD:
        return make_custom_entity_type_list<CUSTOM_TYPE::FLYHEAD>("ENT_TYPE_ITEM_GIANTFLY_HEAD");
    case CUSTOM_TYPE::FORCEFIELD:
        return make_custom_entity_type_list<CUSTOM_TYPE::FORCEFIELD>(
            "ENT_TYPE_FLOOR_FORCEFIELD",
            "ENT_TYPE_FLOOR_DICE_FORCEFIELD",
            "ENT_TYPE_FLOOR_CHALLENGE_ENTRANCE",
            "ENT_TYPE_FLOOR_CHALLENGE_WAITROOM",
            "ENT_TYPE_FLOOR_TIMED_FORCEFIELD");
    case CUSTOM_TYPE::FORESTSISTER:
        return make_custom_entity_type_list<CUSTOM_TYPE::FORESTSISTER>(
            "ENT_TYPE_MONS_SISTER_PARSLEY",
            "ENT_TYPE_MONS_SISTER_PARSNIP",
            "ENT_TYPE_MONS_SISTER_PARMESAN");
    case CUSTOM_TYPE::FROG:
        return make_custom_entity_type_list<CUSTOM_TYPE::FROG>(
            "ENT_TYPE_MONS_FROG",
            "ENT_TYPE_MONS_FIREFROG");
    case CUSTOM_TYPE::FROSTBREATHEFFECT:
        return make_custom_entity_type_list<CUSTOM_TYPE::FROSTBREATHEFFECT>("ENT_TYPE_LOGICAL_FROST_BREATH");
    case CUSTOM_TYPE::FROZENLIQUID:
        return make_custom_entity_type_list<CUSTOM_TYPE::FROZENLIQUID>("ENT_TYPE_ITEM_FROZEN_LIQUID");
    case CUSTOM_TYPE::FXALIENBLAST:
        return make_custom_entity_type_list<CUSTOM_TYPE::FXALIENBLAST>(
            "ENT_TYPE_FX_ALIENBLAST_RETICULE_INTERNAL",
            "ENT_TYPE_FX_ALIENBLAST_RETICULE_EXTERNAL",
            "ENT_TYPE_FX_ALIENBLAST");
    case CUSTOM_TYPE::FXANKHBROKENPIECE:
        return make_custom_entity_type_list<CUSTOM_TYPE::FXANKHBROKENPIECE>("ENT_TYPE_FX_ANKH_BROKENPIECE");
    case CUSTOM_TYPE::FXANKHROTATINGSPARK:
        return make_custom_entity_type_list<CUSTOM_TYPE::FXANKHROTATINGSPARK>("ENT_TYPE_FX_ANKH_ROTATINGSPARK");
    case CUSTOM_TYPE::FXCOMPASS:
        return make_custom_entity_type_list<CUSTOM_TYPE::FXCOMPASS>(
            "ENT_TYPE_FX_COMPASS",
            "ENT_TYPE_FX_SPECIALCOMPASS");
    case CUSTOM_TYPE::FXEMPRESS:
        return make_custom_entity_type_list<CUSTOM_TYPE::FXEMPRESS>("ENT_TYPE_FX_EMPRESS");
    case CUSTOM_TYPE::FXFIREFLYLIGHT:
        return make_custom_entity_type_list<CUSTOM_TYPE::FXFIREFLYLIGHT>("ENT_TYPE_FX_CRITTERFIREFLY_LIGHT");
    case CUSTOM_TYPE::FXHUNDUNNECKPIECE:
        return make_custom_entity_type_list<CUSTOM_TYPE::FXHUNDUNNECKPIECE>("ENT_TYPE_FX_HUNDUN_NECK_PIECE");
    case CUSTOM_TYPE::FXJELLYFISHSTAR:
        return make_custom_entity_type_list<CUSTOM_TYPE::FXJELLYFISHSTAR>("ENT_TYPE_FX_MEGAJELLYFISH_STAR");
    case CUSTOM_TYPE::FXJETPACKFLAME:
        return make_custom_entity_type_list<CUSTOM_TYPE::FXJETPACKFLAME>("ENT_TYPE_FX_JETPACKFLAME");
    case CUSTOM_TYPE::FXKINGUSLIDING:
        return make_custom_entity_type_list<CUSTOM_TYPE::FXKINGUSLIDING>("ENT_TYPE_FX_KINGU_SLIDING");
    case CUSTOM_TYPE::FXLAMASSUATTACK:
        return make_custom_entity_type_list<CUSTOM_TYPE::FXLAMASSUATTACK>("ENT_TYPE_FX_LAMASSU_ATTACK");
    case CUSTOM_TYPE::FXMAINEXITDOOR:
        return make_custom_entity_type_list<CUSTOM_TYPE::FXMAINEXITDOOR>("ENT_TYPE_FX_MAIN_EXIT_DOOR");
    case CUSTOM_TYPE::FXNECROMANCERANKH:
        return make_custom_entity_type_list<CUSTOM_TYPE::FXNECROMANCERANKH>("ENT_TYPE_FX_NECROMANCER_ANKH");
    case CUSTOM_TYPE::FXOUROBORODRAGONPART:
        return make_custom_entity_type_list<CUSTOM_TYPE::FXOUROBORODRAGONPART>(
            "ENT_TYPE_FX_OUROBORO_HEAD",
            "ENT_TYPE_FX_OUROBORO_TAIL");
    case CUSTOM_TYPE::FXOUROBOROOCCLUDER:
        return make_custom_entity_type_list<CUSTOM_TYPE::FXOUROBOROOCCLUDER>("ENT_TYPE_FX_OUROBORO_OCCLUDER");
    case CUSTOM_TYPE::FXPICKUPEFFECT:
        return make_custom_entity_type_list<CUSTOM_TYPE::FXPICKUPEFFECT>("ENT_TYPE_FX_PICKUPEFFECT");
    case CUSTOM_TYPE::FXPLAYERINDICATOR:
        return make_custom_entity_type_list<CUSTOM_TYPE::FXPLAYERINDICATOR>("ENT_TYPE_FX_PLAYERINDICATOR");
    case CUSTOM_TYPE::FXQUICKSAND:
        return make_custom_entity_type_list<CUSTOM_TYPE::FXQUICKSAND>(
            "ENT_TYPE_FX_QUICKSAND_DUST",
            "ENT_TYPE_FX_QUICKSAND_RUBBLE");
    case CUSTOM_TYPE::FXSALECONTAINER:
        return make_custom_entity_type_list<CUSTOM_TYPE::FXSALECONTAINER>("ENT_TYPE_FX_SALEDIALOG_CONTAINER");
    case CUSTOM_TYPE::FXSHOTGUNBLAST:
        return make_custom_entity_type_list<CUSTOM_TYPE::FXSHOTGUNBLAST>("ENT_TYPE_FX_SHOTGUNBLAST");
    case CUSTOM_TYPE::FXSORCERESSATTACK:
        return make_custom_entity_type_list<CUSTOM_TYPE::FXSORCERESSATTACK>("ENT_TYPE_FX_SORCERESS_ATTACK");
    case CUSTOM_TYPE::FXSPARKSMALL:
        return make_custom_entity_type_list<CUSTOM_TYPE::FXSPARKSMALL>("ENT_TYPE_FX_SPARK_SMALL");
    case CUSTOM_TYPE::FXSPRINGTRAPRING:
        return make_custom_entity_type_list<CUSTOM_TYPE::FXSPRINGTRAPRING>("ENT_TYPE_FX_SPRINGTRAP_RING");
    case CUSTOM_TYPE::FXTIAMATHEAD:
        return make_custom_entity_type_list<CUSTOM_TYPE::FXTIAMATHEAD>("ENT_TYPE_FX_TIAMAT_HEAD");
    case CUSTOM_TYPE::FXTIAMATTAIL:
        return make_custom_entity_type_list<CUSTOM_TYPE::FXTIAMATTAIL>(
            "ENT_TYPE_FX_TIAMAT_TAIL",
            "ENT_TYPE_FX_TIAMAT_TAIL_DECO1",
            "ENT_TYPE_FX_TIAMAT_TAIL_DECO2",
            "ENT_TYPE_FX_TIAMAT_TAIL_DECO3");
    case CUSTOM_TYPE::FXTIAMATTORSO:
        return make_custom_entity_type_list<CUSTOM_TYPE::FXTIAMATTORSO>("ENT_TYPE_FX_TIAMAT_TORSO");
    case CUSTOM_TYPE::FXTORNJOURNALPAGE:
        return make_custom_entity_type_list<CUSTOM_TYPE::FXTORNJOURNALPAGE>("ENT_TYPE_FX_TORNJOURNALPAGE");
    case CUSTOM_TYPE::FXUNDERWATERBUBBLE:
        return make_custom_entity_type_list<CUSTOM_TYPE::FXUNDERWATERBUBBLE>("ENT_TYPE_FX_UNDERWATER_BUBBLE");
    case CUSTOM_TYPE::FXVATBUBBLE:
        return make_custom_entity_type_list<CUSTOM_TYPE::FXVATBUBBLE>("ENT_TYPE_FX_VAT_BUBBLE");
    case CUSTOM_TYPE::FXWATERDROP:
        return make_custom_entity_type_list<CUSTOM_TYPE::FXWATERDROP>("ENT_TYPE_FX_WATER_DROP");
    case CUSTOM_TYPE::FXWEBBEDEFFECT:
        return make_custom_entity_type_list<CUSTOM_TYPE::FXWEBBEDEFFECT>("ENT_TYPE_FX_WEBBEDEFFECT");
    case CUSTOM_TYPE::FXWITCHDOCTORHINT:
        return make_custom_entity_type_list<CUSTOM_TYPE::FXWITCHDOCTORHINT>("ENT_TYPE_FX_WITCHDOCTOR_HINT");
    case CUSTOM_TYPE::GENERATOR:
        return make_custom_entity_type_list<CUSTOM_TYPE::GENERATOR>(
            "ENT_TYPE_FLOOR_FACTORY_GENERATOR",
            "ENT_TYPE_FLOOR_SHOPKEEPER_GENERATOR",
            "ENT_TYPE_FLOOR_SUNCHALLENGE_GENERATOR");
    case CUSTOM_TYPE::GHIST:
        return make_custom_entity_type_list<CUSTOM_TYPE::GHIST>(
            "ENT_TYPE_MONS_GHIST",
            "ENT_TYPE_MONS_GHIST_SHOPKEEPER");
    case CUSTOM_TYPE::GHOST:
        return make_custom_entity_type_list<CUSTOM_TYPE::GHOST>(
            "ENT_TYPE_MONS_GHOST",
            "ENT_TYPE_MONS_GHOST_MEDIUM_SAD",
            "ENT_TYPE_MONS_GHOST_MEDIUM_HAPPY",
            "ENT_TYPE_MONS_GHOST_SMALL_ANGRY",
            "ENT_TYPE_MONS_GHOST_SMALL_SAD",
            "ENT_TYPE_MONS_GHOST_SMALL_SURPRISED",
            "ENT_TYPE_MONS_GHOST_SMALL_HAPPY");
    case CUSTOM_TYPE::GHOSTBREATH:
        return make_custom_entity_type_list<CUSTOM_TYPE::GHOSTBREATH>("ENT_TYPE_ITEM_PLAYERGHOST_BREATH");
    case CUSTOM_TYPE::GIANTCLAMTOP:
        return make_custom_entity_type_list<CUSTOM_TYPE::GIANTCLAMTOP>("ENT_TYPE_ITEM_GIANTCLAM_TOP");
    case CUSTOM_TYPE::GIANTFISH:
        return make_custom_entity_type_list<CUSTOM_TYPE::GIANTFISH>("ENT_TYPE_MONS_GIANTFISH");
    case CUSTOM_TYPE::GIANTFLY:
        return make_custom_entity_type_list<CUSTOM_TYPE::GIANTFLY>("ENT_TYPE_MONS_GIANTFLY");
    case CUSTOM_TYPE::GIANTFROG:
        return make_custom_entity_type_list<CUSTOM_TYPE::GIANTFROG>("ENT_TYPE_MONS_GIANTFROG");
    case CUSTOM_TYPE::GOLDBAR:
        return make_custom_entity_type_list<CUSTOM_TYPE::GOLDBAR>(
            "ENT_TYPE_ITEM_GOLDBAR",
            "ENT_TYPE_ITEM_GOLDBARS");
    case CUSTOM_TYPE::GOLDMONKEY:
        return make_custom_entity_type_list<CUSTOM_TYPE::GOLDMONKEY>("ENT_TYPE_MONS_GOLDMONKEY");
    case CUSTOM_TYPE::GRUB:
        return make_custom_entity_type_list<CUSTOM_TYPE::GRUB>("ENT_TYPE_MONS_GRUB");
    case CUSTOM_TYPE::GUN:
        return make_custom_entity_type_list<CUSTOM_TYPE::GUN>(
            "ENT_TYPE_ITEM_WEBGUN",
            "ENT_TYPE_ITEM_SHOTGUN",
            "ENT_TYPE_ITEM_FREEZERAY",
            "ENT_TYPE_ITEM_CAMERA",
            "ENT_TYPE_ITEM_PLASMACANNON",
            "ENT_TYPE_ITEM_SCEPTER",
            "ENT_TYPE_ITEM_CLONEGUN");
    case CUSTOM_TYPE::HANGANCHOR:
        return make_custom_entity_type_list<CUSTOM_TYPE::HANGANCHOR>("ENT_TYPE_ITEM_HANGANCHOR");
    case CUSTOM_TYPE::HANGSPIDER:
        return make_custom_entity_type_list<CUSTOM_TYPE::HANGSPIDER>("ENT_TYPE_MONS_HANGSPIDER");
    case CUSTOM_TYPE::HANGSTRAND:
        return make_custom_entity_type_list<CUSTOM_TYPE::HANGSTRAND>("ENT_TYPE_ITEM_HANGSTRAND");
    case CUSTOM_TYPE::HERMITCRAB:
        return make_custom_entity_type_list<CUSTOM_TYPE::HERMITCRAB>("ENT_TYPE_MONS_HERMITCRAB");
    case CUSTOM_TYPE::HONEY:
        return make_custom_entity_type_list<CUSTOM_TYPE::HONEY>("ENT_TYPE_ITEM_HONEY");
    case CUSTOM_TYPE::HORIZONTALFORCEFIELD:
        return make_custom_entity_type_list<CUSTOM_TYPE::HORIZONTALFORCEFIELD>("ENT_TYPE_FLOOR_HORIZONTAL_FORCEFIELD");
    case CUSTOM_TYPE::HORNEDLIZARD:
        return make_custom_entity_type_list<CUSTOM_TYPE::HORNEDLIZARD>("ENT_TYPE_MONS_HORNEDLIZARD");
    case CUSTOM_TYPE::HOVERPACK:
        return make_custom_entity_type_list<CUSTOM_TYPE::HOVERPACK>("ENT_TYPE_ITEM_HOVERPACK");
    case CUSTOM_TYPE::HUNDUN:
        return make_custom_entity_type_list<CUSTOM_TYPE::HUNDUN>("ENT_TYPE_MONS_HUNDUN");
    case CUSTOM_TYPE::HUNDUNCHEST:
        return make_custom_entity_type_list<CUSTOM_TYPE::HUNDUNCHEST>("ENT_TYPE_ITEM_ENDINGTREASURE_HUNDUN");
    case CUSTOM_TYPE::HUNDUNHEAD:
        return make_custom_entity_type_list<CUSTOM_TYPE::HUNDUNHEAD>(
            "ENT_TYPE_MONS_HUNDUN_BIRDHEAD",
            "ENT_TYPE_MONS_HUNDUN_SNAKEHEAD");
    case CUSTOM_TYPE::ICESLIDINGSOUND:
        return make_custom_entity_type_list<CUSTOM_TYPE::ICESLIDINGSOUND>("ENT_TYPE_LOGICAL_ICESLIDING_SOUND_SOURCE");
    case CUSTOM_TYPE::IDOL:
        return make_custom_entity_type_list<CUSTOM_TYPE::IDOL>(
            "ENT_TYPE_ITEM_IDOL",
            "ENT_TYPE_ITEM_MADAMETUSK_IDOL");
    case CUSTOM_TYPE::IMP:
        return make_custom_entity_type_list<CUSTOM_TYPE::IMP>("ENT_TYPE_MONS_IMP");
    case CUSTOM_TYPE::JETPACK:
        return make_custom_entity_type_list<CUSTOM_TYPE::JETPACK>(
            "ENT_TYPE_ITEM_JETPACK",
            "ENT_TYPE_ITEM_JETPACK_MECH");
    case CUSTOM_TYPE::JIANGSHI:
        return make_custom_entity_type_list<CUSTOM_TYPE::JIANGSHI>(
            "ENT_TYPE_MONS_JIANGSHI",
            "ENT_TYPE_MONS_FEMALE_JIANGSHI");
    case CUSTOM_TYPE::JUMPDOG:
        return make_custom_entity_type_list<CUSTOM_TYPE::JUMPDOG>("ENT_TYPE_MONS_JUMPDOG");
    case CUSTOM_TYPE::JUNGLESPEARCOSMETIC:
        return make_custom_entity_type_list<CUSTOM_TYPE::JUNGLESPEARCOSMETIC>("ENT_TYPE_ITEM_JUNGLE_SPEAR_COSMETIC");
    case CUSTOM_TYPE::JUNGLETRAPTRIGGER:
        return make_custom_entity_type_list<CUSTOM_TYPE::JUNGLETRAPTRIGGER>("ENT_TYPE_LOGICAL_JUNGLESPEAR_TRAP_TRIGGER");
    case CUSTOM_TYPE::KAPALAPOWERUP:
        return make_custom_entity_type_list<CUSTOM_TYPE::KAPALAPOWERUP>("ENT_TYPE_ITEM_POWERUP_KAPALA");
    case CUSTOM_TYPE::KINGU:
        return make_custom_entity_type_list<CUSTOM_TYPE::KINGU>("ENT_TYPE_MONS_KINGU");
    case CUSTOM_TYPE::LAHAMU:
        return make_custom_entity_type_list<CUSTOM_TYPE::LAHAMU>("ENT_TYPE_MONS_ALIENQUEEN");
    case CUSTOM_TYPE::LAMASSU:
        return make_custom_entity_type_list<CUSTOM_TYPE::LAMASSU>("ENT_TYPE_MONS_LAMASSU");
    case CUSTOM_TYPE::LAMPFLAME:
        return make_custom_entity_type_list<CUSTOM_TYPE::LAMPFLAME>("ENT_TYPE_ITEM_LAMPFLAME");
    case CUSTOM_TYPE::LANDMINE:
        return make_custom_entity_type_list<CUSTOM_TYPE::LANDMINE>("ENT_TYPE_ITEM_LANDMINE");
    case CUSTOM_TYPE::LASERBEAM:
        return make_custom_entity_type_list<CUSTOM_TYPE::LASERBEAM>(
            "ENT_TYPE_ITEM_LASERBEAM",
            "ENT_TYPE_ITEM_HORIZONTALLASERBEAM");
    case CUSTOM_TYPE::LASERTRAP:
        return make_custom_entity_type_list<CUSTOM_TYPE::LASERTRAP>("ENT_TYPE_FLOOR_LASER_TRAP");
    case CUSTOM_TYPE::LAVA:
        return make_custom_entity_type_list<CUSTOM_TYPE::LAVA>(
            "ENT_TYPE_LIQUID_LAVA",
            "ENT_TYPE_LIQUID_STAGNANT_LAVA",
            "ENT_TYPE_LIQUID_COARSE_LAVA");
    case CUSTOM_TYPE::LAVAMANDER:
        return make_custom_entity_type_list<CUSTOM_TYPE::LAVAMANDER>("ENT_TYPE_MONS_LAVAMANDER");
    case CUSTOM_TYPE::LEAF:
        return make_custom_entity_type_list<CUSTOM_TYPE::LEAF>("ENT_TYPE_ITEM_LEAF");
    case CUSTOM_TYPE::LEPRECHAUN:
        return make_custom_entity_type_list<CUSTOM_TYPE::LEPRECHAUN>("ENT_TYPE_MONS_LEPRECHAUN");
    case CUSTOM_TYPE::LIGHTARROW:
        return make_custom_entity_type_list<CUSTOM_TYPE::LIGHTARROW>("ENT_TYPE_ITEM_LIGHT_ARROW");
    case CUSTOM_TYPE::LIGHTARROWPLATFORM:
        return make_custom_entity_type_list<CUSTOM_TYPE::LIGHTARROWPLATFORM>("ENT_TYPE_ACTIVEFLOOR_LIGHTARROWPLATFORM");
    case CUSTOM_TYPE::LIGHTEMITTER:
        return make_custom_entity_type_list<CUSTOM_TYPE::LIGHTEMITTER>(
            "ENT_TYPE_ITEM_SCEPTER_ANUBISSHOT",
            "ENT_TYPE_ITEM_SCEPTER_ANUBISSPECIALSHOT",
            "ENT_TYPE_ITEM_SCEPTER_PLAYERSHOT",
            "ENT_TYPE_ITEM_TIAMAT_SHOT",
            "ENT_TYPE_ITEM_REDLANTERNFLAME",
            "ENT_TYPE_ITEM_LANDMINE",
            "ENT_TYPE_ITEM_PLAYERGHOST",
            "ENT_TYPE_ITEM_PALACE_CANDLE_FLAME",
            "ENT_TYPE_ITEM_LAVAPOT",
            "ENT_TYPE_FX_TELEPORTSHADOW");
    case CUSTOM_TYPE::LIGHTSHOT:
        return make_custom_entity_type_list<CUSTOM_TYPE::LIGHTSHOT>(
            "ENT_TYPE_ITEM_PLASMACANNON_SHOT",
            "ENT_TYPE_ITEM_UFO_LASER_SHOT",
            "ENT_TYPE_ITEM_LAMASSU_LASER_SHOT",
            "ENT_TYPE_ITEM_SORCERESS_DAGGER_SHOT",
            "ENT_TYPE_ITEM_LASERTRAP_SHOT",
            "ENT_TYPE_ITEM_FIREBALL",
            "ENT_TYPE_ITEM_HUNDUN_FIREBALL",
            "ENT_TYPE_ITEM_FREEZERAYSHOT",
            "ENT_TYPE_ITEM_CLONEGUNSHOT");
    case CUSTOM_TYPE::LIMBANCHOR:
        return make_custom_entity_type_list<CUSTOM_TYPE::LIMBANCHOR>("ENT_TYPE_LOGICAL_LIMB_ANCHOR");
    case CUSTOM_TYPE::LIQUID:
        return make_custom_entity_type_list<CUSTOM_TYPE::LIQUID>(
            "ENT_TYPE_LIQUID_WATER",
            "ENT_TYPE_LIQUID_COARSE_WATER",
            "ENT_TYPE_LIQUID_LAVA",
            "ENT_TYPE_LIQUID_STAGNANT_LAVA",
            "ENT_TYPE_LIQUID_COARSE_LAVA");
    case CUSTOM_TYPE::LIQUIDSURFACE:
        return make_custom_entity_type_list<CUSTOM_TYPE::LIQUIDSURFACE>(
            "ENT_TYPE_FX_LAVA_GLOW",
            "ENT_TYPE_FX_WATER_SURFACE");
    case CUSTOM_TYPE::LOCKEDDOOR:
        return make_custom_entity_type_list<CUSTOM_TYPE::LOCKEDDOOR>(
            "ENT_TYPE_FLOOR_DOOR_LOCKED",
            "ENT_TYPE_FLOOR_DOOR_LOCKED_PEN");
    case CUSTOM_TYPE::LOGICALANCHOVYFLOCK:
        return make_custom_entity_type_list<CUSTOM_TYPE::LOGICALANCHOVYFLOCK>("ENT_TYPE_LOGICAL_ANCHOVY_FLOCK");
    case CUSTOM_TYPE::LOGICALCONVEYORBELTSOUND:
        return make_custom_entity_type_list<CUSTOM_TYPE::LOGICALCONVEYORBELTSOUND>("ENT_TYPE_LOGICAL_CONVEYORBELT_SOUND_SOURCE");
    case CUSTOM_TYPE::LOGICALDOOR:
        return make_custom_entity_type_list<CUSTOM_TYPE::LOGICALDOOR>(
            "ENT_TYPE_LOGICAL_DOOR",
            "ENT_TYPE_LOGICAL_BLACKMARKET_DOOR");
    case CUSTOM_TYPE::LOGICALDRAIN:
        return make_custom_entity_type_list<CUSTOM_TYPE::LOGICALDRAIN>(
            "ENT_TYPE_LOGICAL_WATER_DRAIN",
            "ENT_TYPE_LOGICAL_LAVA_DRAIN");
    case CUSTOM_TYPE::LOGICALLIQUIDSTREAMSOUND:
        return make_custom_entity_type_list<CUSTOM_TYPE::LOGICALLIQUIDSTREAMSOUND>(
            "ENT_TYPE_LOGICAL_STREAMLAVA_SOUND_SOURCE",
            "ENT_TYPE_LOGICAL_STREAMWATER_SOUND_SOURCE");
    case CUSTOM_TYPE::LOGICALMINIGAME:
        return make_custom_entity_type_list<CUSTOM_TYPE::LOGICALMINIGAME>("ENT_TYPE_LOGICAL_MINIGAME");
    case CUSTOM_TYPE::LOGICALREGENERATINGBLOCK:
        return make_custom_entity_type_list<CUSTOM_TYPE::LOGICALREGENERATINGBLOCK>("ENT_TYPE_LOGICAL_REGENERATING_BLOCK");
    case CUSTOM_TYPE::LOGICALSOUND:
        return make_custom_entity_type_list<CUSTOM_TYPE::LOGICALSOUND>(
            "ENT_TYPE_LOGICAL_DOOR_AMBIENT_SOUND",
            "ENT_TYPE_LOGICAL_STATICLAVA_SOUND_SOURCE",
            "ENT_TYPE_LOGICAL_STREAMLAVA_SOUND_SOURCE",
            "ENT_TYPE_LOGICAL_STREAMWATER_SOUND_SOURCE",
            "ENT_TYPE_LOGICAL_CONVEYORBELT_SOUND_SOURCE",
            "ENT_TYPE_LOGICAL_MUMMYFLIES_SOUND_SOURCE",
            "ENT_TYPE_LOGICAL_QUICKSAND_AMBIENT_SOUND_SOURCE",
            "ENT_TYPE_LOGICAL_QUICKSAND_SOUND_SOURCE",
            "ENT_TYPE_LOGICAL_DUSTWALL_SOUND_SOURCE",
            "ENT_TYPE_LOGICAL_ICESLIDING_SOUND_SOURCE",
            "ENT_TYPE_LOGICAL_PIPE_TRAVELER_SOUND_SOURCE");
    case CUSTOM_TYPE::LOGICALSTATICSOUND:
        return make_custom_entity_type_list<CUSTOM_TYPE::LOGICALSTATICSOUND>(
            "ENT_TYPE_LOGICAL_STATICLAVA_SOUND_SOURCE",
            "ENT_TYPE_LOGICAL_STREAMLAVA_SOUND_SOURCE",
            "ENT_TYPE_LOGICAL_STREAMWATER_SOUND_SOURCE",
            "ENT_TYPE_LOGICAL_QUICKSAND_AMBIENT_SOUND_SOURCE");
    case CUSTOM_TYPE::LOGICALTRAPTRIGGER:
        return make_custom_entity_type_list<CUSTOM_TYPE::LOGICALTRAPTRIGGER>(
            "ENT_TYPE_LOGICAL_ARROW_TRAP_TRIGGER",
            "ENT_TYPE_LOGICAL_TOTEM_TRAP_TRIGGER",
            "ENT_TYPE_LOGICAL_JUNGLESPEAR_TRAP_TRIGGER",
            "ENT_TYPE_LOGICAL_SPIKEBALL_TRIGGER",
            "ENT_TYPE_LOGICAL_TENTACLE_TRIGGER",
            "ENT_TYPE_LOGICAL_BIGSPEAR_TRAP_TRIGGER");
    case CUSTOM_TYPE::TRIGGER:
        return make_custom_entity_type_list<CUSTOM_TYPE::TRIGGER>(
            "ENT_TYPE_LOGICAL_ARROW_TRAP_TRIGGER",
            "ENT_TYPE_LOGICAL_TOTEM_TRAP_TRIGGER",
            "ENT_TYPE_LOGICAL_JUNGLESPEAR_TRAP_TRIGGER",
            "ENT_TYPE_LOGICAL_SPIKEBALL_TRIGGER",
            "ENT_TYPE_LOGICAL_TENTACLE_TRIGGER",
            "ENT_TYPE_LOGICAL_BIGSPEAR_TRAP_TRIGGER",
            "ENT_TYPE_LOGICAL_CRUSH_TRAP_TRIGGER");
    case CUSTOM_TYPE::MAGMAMAN:
        return make_custom_entity_type_list<CUSTOM_TYPE::MAGMAMAN>("ENT_TYPE_MONS_MAGMAMAN");
    case CUSTOM_TYPE::MAINEXIT:
        return make_custom_entity_type_list<CUSTOM_TYPE::MAINEXIT>("ENT_TYPE_FLOOR_DOOR_MAIN_EXIT");
    case CUSTOM_TYPE::MANTRAP:
        return make_custom_entity_type_list<CUSTOM_TYPE::MANTRAP>("ENT_TYPE_MONS_MANTRAP");
    case CUSTOM_TYPE::MATTOCK:
        return make_custom_entity_type_list<CUSTOM_TYPE::MATTOCK>("ENT_TYPE_ITEM_MATTOCK");
    case CUSTOM_TYPE::MECH:
        return make_custom_entity_type_list<CUSTOM_TYPE::MECH>("ENT_TYPE_MOUNT_MECH");
    case CUSTOM_TYPE::MEGAJELLYFISH:
        return make_custom_entity_type_list<CUSTOM_TYPE::MEGAJELLYFISH>(
            "ENT_TYPE_MONS_MEGAJELLYFISH",
            "ENT_TYPE_MONS_MEGAJELLYFISH_BACKGROUND");
    case CUSTOM_TYPE::MINIGAMEASTEROID:
        return make_custom_entity_type_list<CUSTOM_TYPE::MINIGAMEASTEROID>(
            "ENT_TYPE_ITEM_MINIGAME_ASTEROID_BG",
            "ENT_TYPE_ITEM_MINIGAME_ASTEROID",
            "ENT_TYPE_ITEM_MINIGAME_BROKEN_ASTEROID");
    case CUSTOM_TYPE::MINIGAMESHIP:
        return make_custom_entity_type_list<CUSTOM_TYPE::MINIGAMESHIP>("ENT_TYPE_ITEM_MINIGAME_SHIP");
    case CUSTOM_TYPE::MINIGAMESHIPOFFSET:
        return make_custom_entity_type_list<CUSTOM_TYPE::MINIGAMESHIPOFFSET>(
            "ENT_TYPE_FX_MINIGAME_SHIP_DOOR",
            "ENT_TYPE_FX_MINIGAME_SHIP_CENTERJETFLAME",
            "ENT_TYPE_FX_MINIGAME_SHIP_JETFLAME");
    case CUSTOM_TYPE::MOLE:
        return make_custom_entity_type_list<CUSTOM_TYPE::MOLE>("ENT_TYPE_MONS_MOLE");
    case CUSTOM_TYPE::MONKEY:
        return make_custom_entity_type_list<CUSTOM_TYPE::MONKEY>("ENT_TYPE_MONS_MONKEY");
    case CUSTOM_TYPE::MONSTER:
    {
        const static std::vector<ENT_TYPE> types = []()
        {
            auto idx = to_id("ENT_TYPE_MONS_PET_TUTORIAL");
            const auto end = to_id("ENT_TYPE_MONS_GHOST_SMALL_HAPPY") + 1;

            std::vector<ENT_TYPE> result;
            result.reserve(end - idx + 14);
            for (; idx < end; idx++)
            {
                if (idx == to_id("ENT_TYPE_MONS_GHIST_SHOPKEEPER") + 1) // skip no id
                    continue;

                result.push_back(idx);
            }

            result.insert(result.end(), {
                                            to_id("ENT_TYPE_MONS_PET_DOG"),
                                            to_id("ENT_TYPE_MONS_PET_CAT"),
                                            to_id("ENT_TYPE_MONS_PET_HAMSTER"),
                                            to_id("ENT_TYPE_MONS_CRITTERDUNGBEETLE"),
                                            to_id("ENT_TYPE_MONS_CRITTERBUTTERFLY"),
                                            to_id("ENT_TYPE_MONS_CRITTERSNAIL"),
                                            to_id("ENT_TYPE_MONS_CRITTERFISH"),
                                            to_id("ENT_TYPE_MONS_CRITTERANCHOVY"),
                                            to_id("ENT_TYPE_MONS_CRITTERCRAB"),
                                            to_id("ENT_TYPE_MONS_CRITTERLOCUST"),
                                            to_id("ENT_TYPE_MONS_CRITTERPENGUIN"),
                                            to_id("ENT_TYPE_MONS_CRITTERFIREFLY"),
                                            to_id("ENT_TYPE_MONS_CRITTERDRONE"),
                                            to_id("ENT_TYPE_MONS_CRITTERSLIME"),
                                        });
            return result;
        }();
        return {types.begin(), types.end()};
    }
    case CUSTOM_TYPE::MOSQUITO:
        return make_custom_entity_type_list<CUSTOM_TYPE::MOSQUITO>("ENT_TYPE_MONS_MOSQUITO");
    case CUSTOM_TYPE::MOTHERSTATUE:
        return make_custom_entity_type_list<CUSTOM_TYPE::MOTHERSTATUE>("ENT_TYPE_FLOOR_MOTHER_STATUE");
    case CUSTOM_TYPE::MOUNT:
        return make_custom_entity_type_list<CUSTOM_TYPE::MOUNT>(
            "ENT_TYPE_MOUNT_TURKEY",
            "ENT_TYPE_MOUNT_ROCKDOG",
            "ENT_TYPE_MOUNT_AXOLOTL",
            "ENT_TYPE_MOUNT_MECH",
            "ENT_TYPE_MOUNT_QILIN",
            "ENT_TYPE_MOUNT_BASECAMP_CHAIR",
            "ENT_TYPE_MOUNT_BASECAMP_COUCH");
    case CUSTOM_TYPE::MOVABLE:
    {
        const static std::vector<ENT_TYPE> types = []()
        {
            auto idx = to_id("ENT_TYPE_CHAR_ANA_SPELUNKY");
            const auto end = to_id("ENT_TYPE_FX_ANKH_BROKENPIECE") + 1;
            const std::array gaps = {
                to_id("ENT_TYPE_CHAR_HIREDHAND") - 1,
                to_id("ENT_TYPE_MONS_PET_TUTORIAL") - 1,
                to_id("ENT_TYPE_MONS_PET_TUTORIAL") - 2,
                to_id("ENT_TYPE_MONS_GHOST") - 1,
                to_id("ENT_TYPE_MONS_PET_DOG") - 1,
                to_id("ENT_TYPE_MONS_PET_DOG") - 2,
                to_id("ENT_TYPE_MONS_CRITTERDUNGBEETLE") - 1,
                to_id("ENT_TYPE_MONS_CRITTERDUNGBEETLE") - 2,
                to_id("ENT_TYPE_ITEM_WHIP") - 1,
                to_id("ENT_TYPE_ITEM_WHIP") - 2,
                to_id("ENT_TYPE_ITEM_WHIP") - 3,
                to_id("ENT_TYPE_ITEM_POT") - 1,
                to_id("ENT_TYPE_ITEM_GOLDBAR") - 1,
                to_id("ENT_TYPE_ITEM_GOLDBAR") - 2,
                to_id("ENT_TYPE_ITEM_PICKUP_TORNJOURNALPAGE") - 1,
                to_id("ENT_TYPE_ITEM_PICKUP_TORNJOURNALPAGE") - 2,
                to_id("ENT_TYPE_ITEM_PICKUP_SPECTACLES") - 1,
                to_id("ENT_TYPE_ITEM_PICKUP_PLAYERBAG") - 1,
                to_id("ENT_TYPE_ITEM_POWERUP_PASTE") - 1,
                to_id("ENT_TYPE_ITEM_CAPE") - 1,
                to_id("ENT_TYPE_ACTIVEFLOOR_EGGSHIPPLATFORM") - 1,
                to_id("ENT_TYPE_ACTIVEFLOOR_EGGSHIPPLATFORM") - 2,
                to_id("ENT_TYPE_ACTIVEFLOOR_EGGSHIPPLATFORM") - 3,
                to_id("ENT_TYPE_FX_EGGSHIP_SHELL") - 1,
                to_id("ENT_TYPE_FX_EGGSHIP_SHELL") - 2,
                to_id("ENT_TYPE_FX_ANKH_ROTATINGSPARK") - 1,
            };

            std::vector<ENT_TYPE> result;
            result.reserve(550); // more or less
            for (; idx < end; idx++)
            {
                if (std::find(gaps.begin(), gaps.end(), idx) != gaps.end())
                    continue;

                result.push_back(idx);
            }
            return result;
        }();
        return {types.begin(), types.end()};
    }
    case CUSTOM_TYPE::MOVINGICON:
        return make_custom_entity_type_list<CUSTOM_TYPE::MOVINGICON>(
            "ENT_TYPE_FX_SALEICON",
            "ENT_TYPE_FX_DIEINDICATOR",
            "ENT_TYPE_FX_STORAGE_INDICATOR");
    case CUSTOM_TYPE::MUMMY:
        return make_custom_entity_type_list<CUSTOM_TYPE::MUMMY>("ENT_TYPE_MONS_MUMMY");
    case CUSTOM_TYPE::MUMMYFLIESSOUND:
        return make_custom_entity_type_list<CUSTOM_TYPE::MUMMYFLIESSOUND>("ENT_TYPE_LOGICAL_MUMMYFLIES_SOUND_SOURCE");
    case CUSTOM_TYPE::NECROMANCER:
        return make_custom_entity_type_list<CUSTOM_TYPE::NECROMANCER>("ENT_TYPE_MONS_NECROMANCER");
    case CUSTOM_TYPE::NPC:
        return make_custom_entity_type_list<CUSTOM_TYPE::NPC>(
            "ENT_TYPE_MONS_SHOPKEEPERCLONE",
            "ENT_TYPE_MONS_SISTER_PARSLEY",
            "ENT_TYPE_MONS_SISTER_PARSNIP",
            "ENT_TYPE_MONS_SISTER_PARMESAN",
            "ENT_TYPE_MONS_OLD_HUNTER",
            "ENT_TYPE_MONS_THIEF",
            "ENT_TYPE_MONS_BODYGUARD",
            "ENT_TYPE_MONS_HUNDUNS_SERVANT");
    case CUSTOM_TYPE::OCTOPUS:
        return make_custom_entity_type_list<CUSTOM_TYPE::OCTOPUS>("ENT_TYPE_MONS_OCTOPUS");
    case CUSTOM_TYPE::OLMEC:
        return make_custom_entity_type_list<CUSTOM_TYPE::OLMEC>("ENT_TYPE_ACTIVEFLOOR_OLMEC");
    case CUSTOM_TYPE::OLMECCANNON:
        return make_custom_entity_type_list<CUSTOM_TYPE::OLMECCANNON>(
            "ENT_TYPE_ITEM_OLMECCANNON_BOMBS",
            "ENT_TYPE_ITEM_OLMECCANNON_UFO");
    case CUSTOM_TYPE::OLMECFLOATER:
        return make_custom_entity_type_list<CUSTOM_TYPE::OLMECFLOATER>("ENT_TYPE_FX_OLMECPART_FLOATER");
    case CUSTOM_TYPE::OLMITE:
        return make_custom_entity_type_list<CUSTOM_TYPE::OLMITE>(
            "ENT_TYPE_MONS_OLMITE_HELMET",
            "ENT_TYPE_MONS_OLMITE_BODYARMORED",
            "ENT_TYPE_MONS_OLMITE_NAKED");
    case CUSTOM_TYPE::ONFIREEFFECT:
        return make_custom_entity_type_list<CUSTOM_TYPE::ONFIREEFFECT>("ENT_TYPE_LOGICAL_ONFIRE_EFFECT");
    case CUSTOM_TYPE::ORB:
        return make_custom_entity_type_list<CUSTOM_TYPE::ORB>("ENT_TYPE_ITEM_FLOATING_ORB");
    case CUSTOM_TYPE::OSIRISHAND:
        return make_custom_entity_type_list<CUSTOM_TYPE::OSIRISHAND>("ENT_TYPE_MONS_OSIRIS_HAND");
    case CUSTOM_TYPE::OSIRISHEAD:
        return make_custom_entity_type_list<CUSTOM_TYPE::OSIRISHEAD>("ENT_TYPE_MONS_OSIRIS_HEAD");
    case CUSTOM_TYPE::OUROBOROCAMERAANCHOR:
        return make_custom_entity_type_list<CUSTOM_TYPE::OUROBOROCAMERAANCHOR>("ENT_TYPE_LOGICAL_OUROBORO_CAMERA_ANCHOR");
    case CUSTOM_TYPE::OUROBOROCAMERAZOOMIN:
        return make_custom_entity_type_list<CUSTOM_TYPE::OUROBOROCAMERAZOOMIN>("ENT_TYPE_LOGICAL_OUROBORO_CAMERA_ANCHOR_ZOOMIN");
    case CUSTOM_TYPE::PALACESIGN:
        return make_custom_entity_type_list<CUSTOM_TYPE::PALACESIGN>("ENT_TYPE_DECORATION_PALACE_SIGN");
    case CUSTOM_TYPE::PARACHUTEPOWERUP:
        return make_custom_entity_type_list<CUSTOM_TYPE::PARACHUTEPOWERUP>("ENT_TYPE_ITEM_POWERUP_PARACHUTE");
    case CUSTOM_TYPE::PET:
        return make_custom_entity_type_list<CUSTOM_TYPE::PET>(
            "ENT_TYPE_MONS_PET_TUTORIAL",
            "ENT_TYPE_MONS_PET_DOG",
            "ENT_TYPE_MONS_PET_CAT",
            "ENT_TYPE_MONS_PET_HAMSTER");
    case CUSTOM_TYPE::PIPE:
        return make_custom_entity_type_list<CUSTOM_TYPE::PIPE>("ENT_TYPE_FLOOR_PIPE");
    case CUSTOM_TYPE::PIPETRAVELERSOUND:
        return make_custom_entity_type_list<CUSTOM_TYPE::PIPETRAVELERSOUND>("ENT_TYPE_LOGICAL_PIPE_TRAVELER_SOUND_SOURCE");
    case CUSTOM_TYPE::PLAYER:
    {
        const static std::vector<ENT_TYPE> types = []()
        {
            auto idx = to_id("ENT_TYPE_CHAR_ANA_SPELUNKY");
            const auto end = to_id("ENT_TYPE_CHAR_EGGPLANT_CHILD") + 1;
            const auto gap = to_id("ENT_TYPE_CHAR_HIREDHAND") - 1;

            std::vector<ENT_TYPE> result;
            result.reserve(end - idx);
            for (; idx < end; idx++)
            {
                if (idx == gap)
                    continue;

                result.push_back(idx);
            }
            return result;
        }();
        return {types.begin(), types.end()};
    }
    case CUSTOM_TYPE::PLAYERBAG:
        return make_custom_entity_type_list<CUSTOM_TYPE::PLAYERBAG>("ENT_TYPE_ITEM_PICKUP_PLAYERBAG");
    case CUSTOM_TYPE::PLAYERGHOST:
        return make_custom_entity_type_list<CUSTOM_TYPE::PLAYERGHOST>("ENT_TYPE_ITEM_PLAYERGHOST");
    case CUSTOM_TYPE::POISONEDEFFECT:
        return make_custom_entity_type_list<CUSTOM_TYPE::POISONEDEFFECT>("ENT_TYPE_LOGICAL_POISONED_EFFECT");
    case CUSTOM_TYPE::POLEDECO:
        return make_custom_entity_type_list<CUSTOM_TYPE::POLEDECO>(
            "ENT_TYPE_FLOORSTYLED_MINEWOOD",
            "ENT_TYPE_FLOORSTYLED_PAGODA");
    case CUSTOM_TYPE::PORTAL:
        return make_custom_entity_type_list<CUSTOM_TYPE::PORTAL>("ENT_TYPE_LOGICAL_PORTAL");
    case CUSTOM_TYPE::POT:
        return make_custom_entity_type_list<CUSTOM_TYPE::POT>("ENT_TYPE_ITEM_POT");
    case CUSTOM_TYPE::POWERUP:
    {
        const static std::vector<ENT_TYPE> types = []()
        {
            auto idx = to_id("ENT_TYPE_ITEM_POWERUP_PASTE");
            const auto end = to_id("ENT_TYPE_ITEM_POWERUP_SKELETON_KEY") + 1;

            std::vector<ENT_TYPE> result;
            result.reserve(end - idx);
            for (; idx < end; idx++)
                result.push_back(idx);
            return result;
        }();
        return {types.begin(), types.end()};
    }
    case CUSTOM_TYPE::POWERUPCAPABLE:
    {
        const static std::vector<ENT_TYPE> types = []()
        {
            std::vector<ENT_TYPE> result;
            auto idx = to_id("ENT_TYPE_CHAR_ANA_SPELUNKY");
            const auto end = to_id("ENT_TYPE_MONS_CRITTERSLIME") + 1;
            const std::array missing_ids = {
                to_id("ENT_TYPE_CHAR_HIREDHAND") - 1,
                to_id("ENT_TYPE_MONS_PET_TUTORIAL") - 1,
                to_id("ENT_TYPE_MONS_PET_TUTORIAL") - 2,
                to_id("ENT_TYPE_MONS_GHOST") - 1,
                to_id("ENT_TYPE_MONS_PET_DOG") - 1,
                to_id("ENT_TYPE_MONS_PET_DOG") - 2,
                to_id("ENT_TYPE_MONS_CRITTERDUNGBEETLE") - 1,
                to_id("ENT_TYPE_MONS_CRITTERDUNGBEETLE") - 2,
            };

            result.reserve(end - idx);
            for (; idx < end; idx++)
            {
                if (std::find(missing_ids.begin(), missing_ids.end(), idx) != missing_ids.end())
                    continue;

                result.push_back(idx);
            }
            return result;
        }();
        return {types.begin(), types.end()};
    }
    case CUSTOM_TYPE::PROTOSHOPKEEPER:
        return make_custom_entity_type_list<CUSTOM_TYPE::PROTOSHOPKEEPER>("ENT_TYPE_MONS_PROTOSHOPKEEPER");
    case CUSTOM_TYPE::PUNISHBALL:
        return make_custom_entity_type_list<CUSTOM_TYPE::PUNISHBALL>("ENT_TYPE_ITEM_PUNISHBALL");
    case CUSTOM_TYPE::PUSHBLOCK:
        return make_custom_entity_type_list<CUSTOM_TYPE::PUSHBLOCK>(
            "ENT_TYPE_ACTIVEFLOOR_PUSHBLOCK",
            "ENT_TYPE_ACTIVEFLOOR_POWDERKEG",
            "ENT_TYPE_ACTIVEFLOOR_CHAINEDPUSHBLOCK",
            "ENT_TYPE_ACTIVEFLOOR_TIMEDPOWDERKEG");
    case CUSTOM_TYPE::QILIN:
        return make_custom_entity_type_list<CUSTOM_TYPE::QILIN>("ENT_TYPE_MOUNT_QILIN");
    case CUSTOM_TYPE::QUICKSAND:
        return make_custom_entity_type_list<CUSTOM_TYPE::QUICKSAND>("ENT_TYPE_FLOOR_QUICKSAND");
    case CUSTOM_TYPE::QUICKSANDSOUND:
        return make_custom_entity_type_list<CUSTOM_TYPE::QUICKSANDSOUND>("ENT_TYPE_LOGICAL_QUICKSAND_SOUND_SOURCE");
    case CUSTOM_TYPE::QUILLBACK:
        return make_custom_entity_type_list<CUSTOM_TYPE::QUILLBACK>("ENT_TYPE_MONS_CAVEMAN_BOSS");
    case CUSTOM_TYPE::REGENBLOCK:
        return make_custom_entity_type_list<CUSTOM_TYPE::REGENBLOCK>("ENT_TYPE_ACTIVEFLOOR_REGENERATINGBLOCK");
    case CUSTOM_TYPE::ROBOT:
        return make_custom_entity_type_list<CUSTOM_TYPE::ROBOT>("ENT_TYPE_MONS_ROBOT");
    case CUSTOM_TYPE::ROCKDOG:
        return make_custom_entity_type_list<CUSTOM_TYPE::ROCKDOG>("ENT_TYPE_MOUNT_ROCKDOG");
    case CUSTOM_TYPE::ROLLINGITEM:
    {
        const static std::vector<ENT_TYPE> types = []()
        {
            auto idx = to_id("ENT_TYPE_ITEM_PICKUP_TORNJOURNALPAGE");
            const auto end = to_id("ENT_TYPE_ITEM_PICKUP_SKELETON_KEY") + 1;
            const auto gap = to_id("ENT_TYPE_ITEM_PICKUP_SPECTACLES") - 1;

            std::vector<ENT_TYPE> result;
            result.reserve(end - idx);
            for (; idx < end; idx++)
            {
                if (idx == gap)
                    continue;

                result.push_back(idx);
            }
            return result;
        }();
        return {types.begin(), types.end()};
    }
    case CUSTOM_TYPE::ROOMLIGHT:
        return make_custom_entity_type_list<CUSTOM_TYPE::ROOMLIGHT>("ENT_TYPE_LOGICAL_ROOM_LIGHT");
    case CUSTOM_TYPE::ROOMOWNER:
        return make_custom_entity_type_list<CUSTOM_TYPE::ROOMOWNER>(
            "ENT_TYPE_MONS_SHOPKEEPER",
            "ENT_TYPE_MONS_MERCHANT",
            "ENT_TYPE_MONS_YANG",
            "ENT_TYPE_MONS_MADAMETUSK",
            "ENT_TYPE_MONS_STORAGEGUY");
    case CUSTOM_TYPE::RUBBLE:
        return make_custom_entity_type_list<CUSTOM_TYPE::RUBBLE>("ENT_TYPE_ITEM_RUBBLE");
    case CUSTOM_TYPE::SCARAB:
        return make_custom_entity_type_list<CUSTOM_TYPE::SCARAB>("ENT_TYPE_MONS_SCARAB");
    case CUSTOM_TYPE::SCEPTERSHOT:
        return make_custom_entity_type_list<CUSTOM_TYPE::SCEPTERSHOT>(
            "ENT_TYPE_ITEM_SCEPTER_ANUBISSHOT",
            "ENT_TYPE_ITEM_SCEPTER_PLAYERSHOT");
    case CUSTOM_TYPE::SCORPION:
        return make_custom_entity_type_list<CUSTOM_TYPE::SCORPION>("ENT_TYPE_MONS_SCORPION");
    case CUSTOM_TYPE::SHIELD:
        return make_custom_entity_type_list<CUSTOM_TYPE::SHIELD>(
            "ENT_TYPE_ITEM_WOODEN_SHIELD",
            "ENT_TYPE_ITEM_METAL_SHIELD");
    case CUSTOM_TYPE::SHOOTINGSTARSPAWNER:
        return make_custom_entity_type_list<CUSTOM_TYPE::SHOOTINGSTARSPAWNER>("ENT_TYPE_LOGICAL_SHOOTING_STARS_SPAWNER");
    case CUSTOM_TYPE::SHOPKEEPER:
        return make_custom_entity_type_list<CUSTOM_TYPE::SHOPKEEPER>("ENT_TYPE_MONS_SHOPKEEPER");
    case CUSTOM_TYPE::SKELETON:
        return make_custom_entity_type_list<CUSTOM_TYPE::SKELETON>(
            "ENT_TYPE_MONS_SKELETON",
            "ENT_TYPE_MONS_REDSKELETON");
    case CUSTOM_TYPE::SKULLDROPTRAP:
        return make_custom_entity_type_list<CUSTOM_TYPE::SKULLDROPTRAP>("ENT_TYPE_ITEM_SKULLDROPTRAP");
    case CUSTOM_TYPE::SLEEPBUBBLE:
        return make_custom_entity_type_list<CUSTOM_TYPE::SLEEPBUBBLE>("ENT_TYPE_FX_SLEEP_BUBBLE");
    case CUSTOM_TYPE::SLIDINGWALLCEILING:
        return make_custom_entity_type_list<CUSTOM_TYPE::SLIDINGWALLCEILING>("ENT_TYPE_FLOOR_SLIDINGWALL_CEILING");
    case CUSTOM_TYPE::SNAPTRAP:
        return make_custom_entity_type_list<CUSTOM_TYPE::SNAPTRAP>("ENT_TYPE_ITEM_SNAP_TRAP");
    case CUSTOM_TYPE::SORCERESS:
        return make_custom_entity_type_list<CUSTOM_TYPE::SORCERESS>("ENT_TYPE_MONS_SORCERESS");
    case CUSTOM_TYPE::SOUNDSHOT:
        return make_custom_entity_type_list<CUSTOM_TYPE::SOUNDSHOT>(
            "ENT_TYPE_ITEM_UFO_LASER_SHOT",
            "ENT_TYPE_ITEM_LAMASSU_LASER_SHOT",
            "ENT_TYPE_ITEM_FIREBALL",
            "ENT_TYPE_ITEM_HUNDUN_FIREBALL");
    case CUSTOM_TYPE::SPARK:
        return make_custom_entity_type_list<CUSTOM_TYPE::SPARK>("ENT_TYPE_ITEM_SPARK");
    case CUSTOM_TYPE::SPARKTRAP:
        return make_custom_entity_type_list<CUSTOM_TYPE::SPARKTRAP>("ENT_TYPE_FLOOR_SPARK_TRAP");
    case CUSTOM_TYPE::SPEAR:
        return make_custom_entity_type_list<CUSTOM_TYPE::SPEAR>(
            "ENT_TYPE_ITEM_TOTEM_SPEAR",
            "ENT_TYPE_ITEM_LION_SPEAR",
            "ENT_TYPE_ITEM_BIG_SPEAR");
    case CUSTOM_TYPE::SPECIALSHOT:
        return make_custom_entity_type_list<CUSTOM_TYPE::SPECIALSHOT>("ENT_TYPE_ITEM_SCEPTER_ANUBISSPECIALSHOT");
    case CUSTOM_TYPE::SPIDER:
        return make_custom_entity_type_list<CUSTOM_TYPE::SPIDER>(
            "ENT_TYPE_MONS_SPIDER",
            "ENT_TYPE_MONS_GIANTSPIDER");
    case CUSTOM_TYPE::SPIKEBALLTRAP:
        return make_custom_entity_type_list<CUSTOM_TYPE::SPIKEBALLTRAP>("ENT_TYPE_FLOOR_SPIKEBALL_CEILING");
    case CUSTOM_TYPE::SPLASHBUBBLEGENERATOR:
        return make_custom_entity_type_list<CUSTOM_TYPE::SPLASHBUBBLEGENERATOR>("ENT_TYPE_LOGICAL_SPLASH_BUBBLE_GENERATOR");
    case CUSTOM_TYPE::STICKYTRAP:
        return make_custom_entity_type_list<CUSTOM_TYPE::STICKYTRAP>("ENT_TYPE_FLOOR_STICKYTRAP_CEILING");
    case CUSTOM_TYPE::STRETCHCHAIN:
        return make_custom_entity_type_list<CUSTOM_TYPE::STRETCHCHAIN>(
            "ENT_TYPE_ITEM_CRABMAN_CLAWCHAIN",
            "ENT_TYPE_ITEM_PUNISHCHAIN");
    case CUSTOM_TYPE::SWITCH:
        return make_custom_entity_type_list<CUSTOM_TYPE::SWITCH>(
            "ENT_TYPE_ITEM_SLIDINGWALL_SWITCH",
            "ENT_TYPE_ITEM_SLIDINGWALL_SWITCH_REWARD");
    case CUSTOM_TYPE::TADPOLE:
        return make_custom_entity_type_list<CUSTOM_TYPE::TADPOLE>("ENT_TYPE_MONS_TADPOLE");
    case CUSTOM_TYPE::TELEPORTER:
        return make_custom_entity_type_list<CUSTOM_TYPE::TELEPORTER>("ENT_TYPE_ITEM_TELEPORTER");
    case CUSTOM_TYPE::TELEPORTERBACKPACK:
        return make_custom_entity_type_list<CUSTOM_TYPE::TELEPORTERBACKPACK>("ENT_TYPE_ITEM_TELEPORTER_BACKPACK");
    case CUSTOM_TYPE::TELEPORTINGBORDER:
        return make_custom_entity_type_list<CUSTOM_TYPE::TELEPORTINGBORDER>("ENT_TYPE_FLOOR_TELEPORTINGBORDER");
    case CUSTOM_TYPE::TELESCOPE:
        return make_custom_entity_type_list<CUSTOM_TYPE::TELESCOPE>("ENT_TYPE_ITEM_TELESCOPE");
    case CUSTOM_TYPE::TENTACLE:
        return make_custom_entity_type_list<CUSTOM_TYPE::TENTACLE>("ENT_TYPE_ITEM_TENTACLE");
    case CUSTOM_TYPE::TENTACLEBOTTOM:
        return make_custom_entity_type_list<CUSTOM_TYPE::TENTACLEBOTTOM>("ENT_TYPE_FLOOR_TENTACLE_BOTTOM");
    case CUSTOM_TYPE::TERRA:
        return make_custom_entity_type_list<CUSTOM_TYPE::TERRA>("ENT_TYPE_MONS_MARLA_TUNNEL");
    case CUSTOM_TYPE::THINICE:
        return make_custom_entity_type_list<CUSTOM_TYPE::THINICE>("ENT_TYPE_ACTIVEFLOOR_THINICE");
    case CUSTOM_TYPE::TIAMAT:
        return make_custom_entity_type_list<CUSTOM_TYPE::TIAMAT>("ENT_TYPE_MONS_TIAMAT");
    case CUSTOM_TYPE::TIAMATSHOT:
        return make_custom_entity_type_list<CUSTOM_TYPE::TIAMATSHOT>("ENT_TYPE_ITEM_TIAMAT_SHOT");
    case CUSTOM_TYPE::TIMEDFORCEFIELD:
        return make_custom_entity_type_list<CUSTOM_TYPE::TIMEDFORCEFIELD>("ENT_TYPE_FLOOR_TIMED_FORCEFIELD");
    case CUSTOM_TYPE::TIMEDPOWDERKEG:
        return make_custom_entity_type_list<CUSTOM_TYPE::TIMEDPOWDERKEG>("ENT_TYPE_ACTIVEFLOOR_TIMEDPOWDERKEG");
    case CUSTOM_TYPE::TIMEDSHOT:
        return make_custom_entity_type_list<CUSTOM_TYPE::TIMEDSHOT>("ENT_TYPE_ITEM_FREEZERAYSHOT");
    case CUSTOM_TYPE::TORCH:
        return make_custom_entity_type_list<CUSTOM_TYPE::TORCH>(
            "ENT_TYPE_ITEM_WALLTORCH",
            "ENT_TYPE_ITEM_LITWALLTORCH",
            "ENT_TYPE_ITEM_AUTOWALLTORCH",
            "ENT_TYPE_ITEM_TORCH",
            "ENT_TYPE_ITEM_LAMP",
            "ENT_TYPE_ITEM_REDLANTERN");
    case CUSTOM_TYPE::TORCHFLAME:
        return make_custom_entity_type_list<CUSTOM_TYPE::TORCHFLAME>("ENT_TYPE_ITEM_TORCHFLAME");
    case CUSTOM_TYPE::TOTEMTRAP:
        return make_custom_entity_type_list<CUSTOM_TYPE::TOTEMTRAP>(
            "ENT_TYPE_FLOOR_TOTEM_TRAP",
            "ENT_TYPE_FLOOR_LION_TRAP");
    case CUSTOM_TYPE::TRANSFERFLOOR:
        return make_custom_entity_type_list<CUSTOM_TYPE::TRANSFERFLOOR>(
            "ENT_TYPE_FLOOR_CONVEYORBELT_LEFT",
            "ENT_TYPE_FLOOR_CONVEYORBELT_RIGHT");
    case CUSTOM_TYPE::TRAPPART:
        return make_custom_entity_type_list<CUSTOM_TYPE::TRAPPART>(
            "ENT_TYPE_ITEM_STICKYTRAP_BALL",
            "ENT_TYPE_ACTIVEFLOOR_CHAINED_SPIKEBALL",
            "ENT_TYPE_ACTIVEFLOOR_SLIDINGWALL");
    case CUSTOM_TYPE::TREASURE:
        return make_custom_entity_type_list<CUSTOM_TYPE::TREASURE>(
            "ENT_TYPE_ITEM_ENDINGTREASURE_TIAMAT",
            "ENT_TYPE_ITEM_ENDINGTREASURE_HUNDUN");
    case CUSTOM_TYPE::TREASUREHOOK:
        return make_custom_entity_type_list<CUSTOM_TYPE::TREASUREHOOK>("ENT_TYPE_ITEM_EGGSHIP_HOOK");
    case CUSTOM_TYPE::TRUECROWNPOWERUP:
        return make_custom_entity_type_list<CUSTOM_TYPE::TRUECROWNPOWERUP>("ENT_TYPE_ITEM_POWERUP_TRUECROWN");
    case CUSTOM_TYPE::TUN:
        return make_custom_entity_type_list<CUSTOM_TYPE::TUN>("ENT_TYPE_MONS_MERCHANT");
    case CUSTOM_TYPE::TV:
        return make_custom_entity_type_list<CUSTOM_TYPE::TV>("ENT_TYPE_ITEM_TV");
    case CUSTOM_TYPE::UDJATSOCKET:
        return make_custom_entity_type_list<CUSTOM_TYPE::UDJATSOCKET>("ENT_TYPE_ITEM_UDJAT_SOCKET");
    case CUSTOM_TYPE::UFO:
        return make_custom_entity_type_list<CUSTOM_TYPE::UFO>("ENT_TYPE_MONS_UFO");
    case CUSTOM_TYPE::UNCHAINEDSPIKEBALL:
        return make_custom_entity_type_list<CUSTOM_TYPE::UNCHAINEDSPIKEBALL>("ENT_TYPE_ACTIVEFLOOR_UNCHAINED_SPIKEBALL");
    case CUSTOM_TYPE::USHABTI:
        return make_custom_entity_type_list<CUSTOM_TYPE::USHABTI>("ENT_TYPE_ITEM_USHABTI");
    case CUSTOM_TYPE::VAMPIRE:
        return make_custom_entity_type_list<CUSTOM_TYPE::VAMPIRE>(
            "ENT_TYPE_MONS_VAMPIRE",
            "ENT_TYPE_MONS_VLAD");
    case CUSTOM_TYPE::VANHORSING:
        return make_custom_entity_type_list<CUSTOM_TYPE::VANHORSING>("ENT_TYPE_MONS_OLD_HUNTER");
    case CUSTOM_TYPE::VLAD:
        return make_custom_entity_type_list<CUSTOM_TYPE::VLAD>("ENT_TYPE_MONS_VLAD");
    case CUSTOM_TYPE::VLADSCAPE:
        return make_custom_entity_type_list<CUSTOM_TYPE::VLADSCAPE>("ENT_TYPE_ITEM_VLADS_CAPE");
    case CUSTOM_TYPE::WADDLER:
        return make_custom_entity_type_list<CUSTOM_TYPE::WADDLER>("ENT_TYPE_MONS_STORAGEGUY");
    case CUSTOM_TYPE::WALKINGMONSTER:
        return make_custom_entity_type_list<CUSTOM_TYPE::WALKINGMONSTER>(
            "ENT_TYPE_MONS_CAVEMAN",
            "ENT_TYPE_MONS_CAVEMAN_SHOPKEEPER",
            "ENT_TYPE_MONS_CAVEMAN_BOSS",
            "ENT_TYPE_MONS_TIKIMAN",
            "ENT_TYPE_MONS_WITCHDOCTOR",
            "ENT_TYPE_MONS_ROBOT",
            "ENT_TYPE_MONS_CROCMAN",
            "ENT_TYPE_MONS_SORCERESS",
            "ENT_TYPE_MONS_NECROMANCER",
            "ENT_TYPE_MONS_OCTOPUS",
            "ENT_TYPE_MONS_YETI",
            "ENT_TYPE_MONS_OLMITE_HELMET",
            "ENT_TYPE_MONS_OLMITE_BODYARMORED",
            "ENT_TYPE_MONS_OLMITE_NAKED",
            "ENT_TYPE_MONS_LEPRECHAUN");
    case CUSTOM_TYPE::WALLTORCH:
        return make_custom_entity_type_list<CUSTOM_TYPE::WALLTORCH>(
            "ENT_TYPE_ITEM_WALLTORCH",
            "ENT_TYPE_ITEM_LITWALLTORCH",
            "ENT_TYPE_ITEM_AUTOWALLTORCH");
    case CUSTOM_TYPE::WEBSHOT:
        return make_custom_entity_type_list<CUSTOM_TYPE::WEBSHOT>("ENT_TYPE_ITEM_WEBSHOT");
    case CUSTOM_TYPE::WETEFFECT:
        return make_custom_entity_type_list<CUSTOM_TYPE::WETEFFECT>("ENT_TYPE_LOGICAL_WET_EFFECT");
    case CUSTOM_TYPE::WITCHDOCTOR:
        return make_custom_entity_type_list<CUSTOM_TYPE::WITCHDOCTOR>("ENT_TYPE_MONS_WITCHDOCTOR");
    case CUSTOM_TYPE::WITCHDOCTORSKULL:
        return make_custom_entity_type_list<CUSTOM_TYPE::WITCHDOCTORSKULL>("ENT_TYPE_MONS_WITCHDOCTORSKULL");
    case CUSTOM_TYPE::WOODENLOGTRAP:
        return make_custom_entity_type_list<CUSTOM_TYPE::WOODENLOGTRAP>("ENT_TYPE_ACTIVEFLOOR_WOODENLOG_TRAP");
    case CUSTOM_TYPE::YAMA:
        return make_custom_entity_type_list<CUSTOM_TYPE::YAMA>("ENT_TYPE_MONS_YAMA");
    case CUSTOM_TYPE::YANG:
        return make_custom_entity_type_list<CUSTOM_TYPE::YANG>("ENT_TYPE_MONS_YANG");
    case CUSTOM_TYPE::YELLOWCAPE:
        return make_custom_entity_type_list<CUSTOM_TYPE::YELLOWCAPE>("ENT_TYPE_ITEM_CAPE");
    case CUSTOM_TYPE::YETIKING:
        return make_custom_entity_type_list<CUSTOM_TYPE::YETIKING>("ENT_TYPE_MONS_YETIKING");
    case CUSTOM_TYPE::YETIQUEEN:
        return make_custom_entity_type_list<CUSTOM_TYPE::YETIQUEEN>("ENT_TYPE_MONS_YETIQUEEN");
    case CUSTOM_TYPE::PURCHASABLE:
        return make_custom_entity_type_list<CUSTOM_TYPE::TORCH>(
            "ENT_TYPE_ITEM_WOODEN_ARROW",
            "ENT_TYPE_ITEM_ROCK",
            "ENT_TYPE_ITEM_METAL_ARROW",
            "ENT_TYPE_ITEM_LIGHT_ARROW",
            "ENT_TYPE_ITEM_PRESENT",
            "ENT_TYPE_ITEM_GHIST_PRESENT",
            "ENT_TYPE_ITEM_POT",
            "ENT_TYPE_ITEM_SKULL",
            "ENT_TYPE_ITEM_PICKUP_TORNJOURNALPAGE",
            "ENT_TYPE_ITEM_PICKUP_JOURNAL",
            "ENT_TYPE_ITEM_PICKUP_ROPE",
            "ENT_TYPE_ITEM_PICKUP_ROPEPILE",
            "ENT_TYPE_ITEM_PICKUP_BOMBBAG",
            "ENT_TYPE_ITEM_PICKUP_BOMBBOX",
            "ENT_TYPE_ITEM_PICKUP_ROYALJELLY",
            "ENT_TYPE_ITEM_PICKUP_COOKEDTURKEY",
            "ENT_TYPE_ITEM_PICKUP_GIANTFOOD",
            "ENT_TYPE_ITEM_PICKUP_ELIXIR",
            "ENT_TYPE_ITEM_PICKUP_CLOVER",
            "ENT_TYPE_ITEM_PICKUP_SEEDEDRUNSUNLOCKER",
            "ENT_TYPE_ITEM_PICKUP_SPECTACLES",
            "ENT_TYPE_ITEM_PICKUP_CLIMBINGGLOVES",
            "ENT_TYPE_ITEM_PICKUP_PITCHERSMITT",
            "ENT_TYPE_ITEM_PICKUP_SPRINGSHOES",
            "ENT_TYPE_ITEM_PICKUP_SPIKESHOES",
            "ENT_TYPE_ITEM_PICKUP_PASTE",
            "ENT_TYPE_ITEM_PICKUP_COMPASS",
            "ENT_TYPE_ITEM_PICKUP_SPECIALCOMPASS",
            "ENT_TYPE_ITEM_PICKUP_PARACHUTE",
            "ENT_TYPE_ITEM_PICKUP_UDJATEYE",
            "ENT_TYPE_ITEM_PICKUP_KAPALA",
            "ENT_TYPE_ITEM_PICKUP_HEDJET",
            "ENT_TYPE_ITEM_PICKUP_CROWN",
            "ENT_TYPE_ITEM_PICKUP_EGGPLANTCROWN",
            "ENT_TYPE_ITEM_PICKUP_TRUECROWN",
            "ENT_TYPE_ITEM_PICKUP_ANKH",
            "ENT_TYPE_ITEM_PICKUP_TABLETOFDESTINY",
            "ENT_TYPE_ITEM_PICKUP_SKELETON_KEY",
            "ENT_TYPE_ITEM_PURCHASABLE_CAPE",
            "ENT_TYPE_ITEM_PURCHASABLE_JETPACK",
            "ENT_TYPE_ITEM_PURCHASABLE_TELEPORTER_BACKPACK",
            "ENT_TYPE_ITEM_PURCHASABLE_HOVERPACK",
            "ENT_TYPE_ITEM_PURCHASABLE_POWERPACK",
            "ENT_TYPE_ITEM_WEBGUN",
            "ENT_TYPE_ITEM_SHOTGUN",
            "ENT_TYPE_ITEM_FREEZERAY",
            "ENT_TYPE_ITEM_CAMERA",
            "ENT_TYPE_ITEM_TELEPORTER",
            "ENT_TYPE_ITEM_MATTOCK",
            "ENT_TYPE_ITEM_BOOMERANG",
            "ENT_TYPE_ITEM_MACHETE",
            "ENT_TYPE_ITEM_PLASMACANNON",
            "ENT_TYPE_ITEM_SCEPTER",
            "ENT_TYPE_ITEM_CLONEGUN",
            "ENT_TYPE_ITEM_WOODEN_SHIELD",
            "ENT_TYPE_ITEM_METAL_SHIELD");
    default:
    {
        auto it = user_custom_types.find(type);
        if (it != user_custom_types.end())
        {
            return {it->second.begin(), it->second.end()};
        }
    }
    }
    return {};
}

CUSTOM_TYPE add_new_custom_type(std::vector<ENT_TYPE> types)
{
    ++g_last_custom_id;
    if (types.empty())
    {
        types.push_back(g_last_custom_id);
    }
    user_custom_types.emplace((CUSTOM_TYPE)g_last_custom_id, std::move(types));
    return (CUSTOM_TYPE)g_last_custom_id;
}

bool is_type_movable(ENT_TYPE type)
{
    auto movable_types = get_custom_entity_types(CUSTOM_TYPE::MOVABLE);
    if (std::find(movable_types.begin(), movable_types.end(), type) != movable_types.end())
        return true;

    return false;
}

const std::vector<std::pair<CUSTOM_TYPE, std::string_view>>& get_custom_types_vector()
{
    return custom_type_names;
}
