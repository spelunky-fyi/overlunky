#include <Windows.h>         // for DWORD, MB_OK, MessageBox
#include <algorithm>         // for transform, replace, sort
#include <array>             // for array, _Array_iterator
#include <cctype>            // for toupper
#include <chrono>            // for operator<=>, operator-
#include <cmath>             // for round, abs
#include <compare>           // for operator<, operator<=
#include <cstdint>           // for uint32_t, int64_t, uint...
#include <cstdlib>           // for abs, size_t, exit, NULL
#include <filesystem>        // for create_directories
#include <fmt/format.h>      // for check_format_string
#include <fstream>           // for char_traits, operator<<
#include <functional>        // for equal_to, less
#include <initializer_list>  // for initializer_list
#include <list>              // for _List_iterator, _List_c...
#include <locale>            // for num_put
#include <map>               // for multimap, _Tree_iterator
#include <new>               // for operator new
#include <nlohmann/json.hpp> // for basic_json<>::object_t
#include <set>               // for set
#include <stdexcept>         // for out_of_range
#include <string>            // for string, operator+, oper...
#include <thread>            // for sleep_for
#include <type_traits>       // for move, remove_reference_t
#include <unordered_map>     // for unordered_map, unordere...
#include <utility>           // for max, min, tuple_element...
#include <vector>            // for vector, _Vector_iterator

#include "color.hpp"                         // for Color
#include "console.hpp"                       // for SpelunkyConsole
#include "containers/game_unordered_map.hpp" // for game_unordered_map
#include "entity.hpp"                        // for EntityDB, EntityItem
#include "level_api.hpp"                     // for LevelGenData, LevelGenS...
#include "logger.h"                          // for DEBUG
#include "memory.hpp"                        // for Memory
#include "particles.hpp"                     // for list_particles, Particl...
#include "search.hpp"                        // for get_address
#include "settings_api.hpp"                  // for get_settings_names_and_...
#include "sound_manager.hpp"                 // for SoundManager, SoundMana...
#include "state.hpp"                         // for StateMemory, State
#include "texture.hpp"                       // for Texture, get_textures
#include "virtual_table.hpp"                 // for VTABLE_OFFSET, VTABLE_O...

using float_json = nlohmann::basic_json<std::map, std::vector, std::string, bool, std::int64_t, std::uint64_t, float>;
#define FLOAT_JSON_DEFINE_TYPE_NON_INTRUSIVE(Type, ...)                             \
    inline void to_json(float_json& nlohmann_json_j, const Type& nlohmann_json_t)   \
    {                                                                               \
        NLOHMANN_JSON_EXPAND(NLOHMANN_JSON_PASTE(NLOHMANN_JSON_TO, __VA_ARGS__))    \
    }                                                                               \
    inline void from_json(const float_json& nlohmann_json_j, Type& nlohmann_json_t) \
    {                                                                               \
        NLOHMANN_JSON_EXPAND(NLOHMANN_JSON_PASTE(NLOHMANN_JSON_FROM, __VA_ARGS__))  \
    }

// Have to do this because otherwise it writes out animations like a mess
auto get_animations_as_string_map(const EntityDB& ent)
{
    std::map<std::string, Animation> animations;
    for (auto& [id, anim] : ent.animations)
    {
        animations[std::to_string(id)] = anim;
    }
    return animations;
}

void get_vtables()
{
    if (auto file = std::ofstream("game_data/vtable_sizes.csv"))
    {
        const std::initializer_list<VTABLE_OFFSET> offsets{
            VTABLE_OFFSET::FLOOR_BORDERTILE,
            VTABLE_OFFSET::FLOOR_BORDERTILE_METAL,
            VTABLE_OFFSET::FLOOR_BORDERTILE_OCTOPUS,
            VTABLE_OFFSET::FLOOR_GENERIC,
            VTABLE_OFFSET::FLOOR_SURFACE,
            VTABLE_OFFSET::FLOOR_SURFACE_HIDDEN,
            VTABLE_OFFSET::FLOOR_BASECAMP_SINGLEBED,
            VTABLE_OFFSET::FLOOR_BASECAMP_DININGTABLE,
            VTABLE_OFFSET::FLOOR_BASECAMP_LONGTABLE,
            VTABLE_OFFSET::FLOOR_JUNGLE,
            VTABLE_OFFSET::FLOOR_TUNNEL_CURRENT,
            VTABLE_OFFSET::FLOOR_TUNNEL_NEXT,
            VTABLE_OFFSET::FLOOR_PLATFORM,
            VTABLE_OFFSET::FLOOR_PAGODA_PLATFORM,
            VTABLE_OFFSET::FLOOR_LADDER,
            VTABLE_OFFSET::FLOOR_LADDER_PLATFORM,
            VTABLE_OFFSET::FLOOR_VINE,
            VTABLE_OFFSET::FLOOR_VINE_TREE_TOP,
            VTABLE_OFFSET::FLOOR_GROWABLE_VINE,
            VTABLE_OFFSET::FLOOR_CLIMBING_POLE,
            VTABLE_OFFSET::FLOOR_GROWABLE_CLIMBING_POLE,
            VTABLE_OFFSET::FLOOR_DOOR_ENTRANCE,
            VTABLE_OFFSET::FLOOR_DOOR_EXIT,
            VTABLE_OFFSET::FLOOR_DOOR_MAIN_EXIT,
            VTABLE_OFFSET::FLOOR_DOOR_STARTING_EXIT,
            VTABLE_OFFSET::FLOOR_DOOR_LAYER,
            VTABLE_OFFSET::FLOOR_DOOR_LAYER_DROP_HELD,
            VTABLE_OFFSET::FLOOR_DOOR_GHISTSHOP,
            VTABLE_OFFSET::FLOOR_DOOR_LOCKED,
            VTABLE_OFFSET::FLOOR_DOOR_LOCKED_PEN,
            VTABLE_OFFSET::FLOOR_DOOR_COG,
            VTABLE_OFFSET::FLOOR_DOOR_MOAI_STATUE,
            VTABLE_OFFSET::FLOOR_DOOR_EGGSHIP,
            VTABLE_OFFSET::FLOOR_DOOR_EGGSHIP_ATREZZO,
            VTABLE_OFFSET::FLOOR_DOOR_EGGSHIP_ROOM,
            VTABLE_OFFSET::FLOOR_DOOR_EGGPLANT_WORLD,
            VTABLE_OFFSET::FLOOR_DOOR_PLATFORM,
            VTABLE_OFFSET::FLOOR_SPIKES,
            VTABLE_OFFSET::FLOOR_SPIKES_UPSIDEDOWN,
            VTABLE_OFFSET::FLOOR_ARROW_TRAP,
            VTABLE_OFFSET::FLOOR_POISONED_ARROW_TRAP,
            VTABLE_OFFSET::FLOOR_TOTEM_TRAP,
            VTABLE_OFFSET::FLOOR_JUNGLE_SPEAR_TRAP,
            VTABLE_OFFSET::FLOOR_LION_TRAP,
            VTABLE_OFFSET::FLOOR_LASER_TRAP,
            VTABLE_OFFSET::FLOOR_SPARK_TRAP,
            VTABLE_OFFSET::FLOOR_ALTAR,
            VTABLE_OFFSET::FLOOR_IDOL_BLOCK,
            VTABLE_OFFSET::FLOOR_IDOL_TRAP_CEILING,
            VTABLE_OFFSET::FLOOR_STORAGE,
            VTABLE_OFFSET::FLOOR_TREE_BASE,
            VTABLE_OFFSET::FLOOR_TREE_TRUNK,
            VTABLE_OFFSET::FLOOR_TREE_TOP,
            VTABLE_OFFSET::FLOOR_TREE_BRANCH,
            VTABLE_OFFSET::FLOOR_MUSHROOM_BASE,
            VTABLE_OFFSET::FLOOR_MUSHROOM_TRUNK,
            VTABLE_OFFSET::FLOOR_MUSHROOM_TOP,
            VTABLE_OFFSET::FLOOR_MUSHROOM_HAT_PLATFORM,
            VTABLE_OFFSET::FLOOR_THORN_VINE,
            VTABLE_OFFSET::FLOOR_SPIKEBALL_CEILING,
            VTABLE_OFFSET::FLOOR_CHAINANDBLOCKS_CEILING,
            VTABLE_OFFSET::FLOOR_CHAINANDBLOCKS_CHAIN,
            VTABLE_OFFSET::FLOOR_CHAIN_CEILING,
            VTABLE_OFFSET::FLOOR_CONVEYORBELT_LEFT,
            VTABLE_OFFSET::FLOOR_CONVEYORBELT_RIGHT,
            VTABLE_OFFSET::FLOOR_FACTORY_GENERATOR,
            VTABLE_OFFSET::FLOOR_SLIDINGWALL_CEILING,
            VTABLE_OFFSET::FLOOR_QUICKSAND,
            VTABLE_OFFSET::FLOOR_EXCALIBUR_STONE,
            VTABLE_OFFSET::FLOOR_DUSTWALL,
            VTABLE_OFFSET::FLOOR_DUAT_ALTAR,
            VTABLE_OFFSET::FLOOR_ICE,
            VTABLE_OFFSET::FLOOR_SPRING_TRAP,
            VTABLE_OFFSET::FLOOR_EGGPLANT_ALTAR,
            VTABLE_OFFSET::FLOOR_MOAI_PLATFORM,
            VTABLE_OFFSET::FLOOR_SHOPKEEPER_GENERATOR,
            VTABLE_OFFSET::FLOOR_SUNCHALLENGE_GENERATOR,
            VTABLE_OFFSET::FLOOR_PIPE,
            VTABLE_OFFSET::FLOOR_BIGSPEAR_TRAP,
            VTABLE_OFFSET::FLOOR_STICKYTRAP_CEILING,
            VTABLE_OFFSET::FLOOR_MOTHER_STATUE,
            VTABLE_OFFSET::FLOOR_MOTHER_STATUE_PLATFORM,
            VTABLE_OFFSET::FLOOR_GIANTFROG_PLATFORM,
            VTABLE_OFFSET::FLOOR_TELEPORTINGBORDER,
            VTABLE_OFFSET::FLOOR_FORCEFIELD,
            VTABLE_OFFSET::FLOOR_DICE_FORCEFIELD,
            VTABLE_OFFSET::FLOOR_CHALLENGE_ENTRANCE,
            VTABLE_OFFSET::FLOOR_CHALLENGE_WAITROOM,
            VTABLE_OFFSET::FLOOR_TIMED_FORCEFIELD,
            VTABLE_OFFSET::FLOOR_FORCEFIELD_TOP,
            VTABLE_OFFSET::FLOOR_HORIZONTAL_FORCEFIELD,
            VTABLE_OFFSET::FLOOR_HORIZONTAL_FORCEFIELD_TOP,
            VTABLE_OFFSET::FLOOR_PEN,
            VTABLE_OFFSET::FLOOR_TOMB,
            VTABLE_OFFSET::FLOOR_YAMA_PLATFORM,
            VTABLE_OFFSET::FLOOR_EMPRESS_GRAVE,
            VTABLE_OFFSET::FLOOR_PALACE_TABLE_PLATFORM,
            VTABLE_OFFSET::FLOOR_PALACE_TRAY_PLATFORM,
            VTABLE_OFFSET::FLOOR_PALACE_CHANDELIER_PLATFORM,
            VTABLE_OFFSET::FLOOR_PALACE_BOOKCASE_PLATFORM,
            VTABLE_OFFSET::FLOOR_TENTACLE_BOTTOM,
            VTABLE_OFFSET::FLOORSTYLED_MINEWOOD,
            VTABLE_OFFSET::FLOORSTYLED_STONE,
            VTABLE_OFFSET::FLOORSTYLED_TEMPLE,
            VTABLE_OFFSET::FLOORSTYLED_PAGODA,
            VTABLE_OFFSET::FLOORSTYLED_BABYLON,
            VTABLE_OFFSET::FLOORSTYLED_SUNKEN,
            VTABLE_OFFSET::FLOORSTYLED_BEEHIVE,
            VTABLE_OFFSET::FLOORSTYLED_VLAD,
            VTABLE_OFFSET::FLOORSTYLED_COG,
            VTABLE_OFFSET::FLOORSTYLED_MOTHERSHIP,
            VTABLE_OFFSET::FLOORSTYLED_DUAT,
            VTABLE_OFFSET::FLOORSTYLED_PALACE,
            VTABLE_OFFSET::FLOORSTYLED_GUTS,
            VTABLE_OFFSET::DECORATION_BORDER,
            VTABLE_OFFSET::DECORATION_GENERIC,
            VTABLE_OFFSET::DECORATION_SURFACE,
            VTABLE_OFFSET::DECORATION_SURFACE_COVER,
            VTABLE_OFFSET::DECORATION_JUNGLE,
            VTABLE_OFFSET::DECORATION_MINEWOOD,
            VTABLE_OFFSET::DECORATION_BONEBLOCK,
            VTABLE_OFFSET::DECORATION_BUSHBLOCK,
            VTABLE_OFFSET::DECORATION_STONE,
            VTABLE_OFFSET::DECORATION_TEMPLE,
            VTABLE_OFFSET::DECORATION_PAGODA,
            VTABLE_OFFSET::DECORATION_SUNKEN,
            VTABLE_OFFSET::DECORATION_BABYLON,
            VTABLE_OFFSET::DECORATION_BG_TRANSITIONCOVER,
            VTABLE_OFFSET::DECORATION_MINEWOOD_POLE,
            VTABLE_OFFSET::DECORATION_PAGODA_POLE,
            VTABLE_OFFSET::DECORATION_CROSS_BEAM,
            VTABLE_OFFSET::DECORATION_HANGING_HIDE,
            VTABLE_OFFSET::DECORATION_HANGING_SEAWEED,
            VTABLE_OFFSET::DECORATION_HANGING_BANNER,
            VTABLE_OFFSET::DECORATION_HANGING_WIRES,
            VTABLE_OFFSET::DECORATION_DWELLINGBUSH,
            VTABLE_OFFSET::DECORATION_JUNGLEBUSH,
            VTABLE_OFFSET::DECORATION_BABYLONBUSH,
            VTABLE_OFFSET::DECORATION_TIDEPOOLBUSH,
            VTABLE_OFFSET::DECORATION_JUNGLE_FLOWER,
            VTABLE_OFFSET::DECORATION_BABYLON_FLOWER,
            VTABLE_OFFSET::DECORATION_TIDEPOOL_CORAL,
            VTABLE_OFFSET::DECORATION_JUNGLE_HANGING_FLOWER,
            VTABLE_OFFSET::DECORATION_BABYLON_HANGING_FLOWER,
            VTABLE_OFFSET::DECORATION_BABYLON_NEON_SIGN,
            VTABLE_OFFSET::DECORATION_BRANCH,
            VTABLE_OFFSET::DECORATION_SPIKES_BLOOD,
            VTABLE_OFFSET::DECORATION_SHOPFORE,
            VTABLE_OFFSET::DECORATION_SHOPSIGN,
            VTABLE_OFFSET::DECORATION_SHOPSIGNICON,
            VTABLE_OFFSET::DECORATION_BASECAMPSIGN,
            VTABLE_OFFSET::DECORATION_BASECAMPDOGSIGN,
            VTABLE_OFFSET::DECORATION_TREE,
            VTABLE_OFFSET::DECORATION_TREETRUNK_CLIMBINGHINT,
            VTABLE_OFFSET::DECORATION_TREETRUNK_TOPFRONT,
            VTABLE_OFFSET::DECORATION_TREETRUNK_TOPBACK,
            VTABLE_OFFSET::DECORATION_TREETRUNK_BROKEN,
            VTABLE_OFFSET::DECORATION_TREE_VINE_TOP,
            VTABLE_OFFSET::DECORATION_TREE_VINE,
            VTABLE_OFFSET::DECORATION_MUSHROOM_HAT,
            VTABLE_OFFSET::DECORATION_THORN_VINE,
            VTABLE_OFFSET::DECORATION_BEEHIVE,
            VTABLE_OFFSET::DECORATION_CHAINANDBLOCKS_CHAINDECORATION,
            VTABLE_OFFSET::DECORATION_CONVEYORBELT_RAILING,
            VTABLE_OFFSET::DECORATION_VLAD,
            VTABLE_OFFSET::DECORATION_KELP,
            VTABLE_OFFSET::DECORATION_SLIDINGWALL_CHAINDECORATION,
            VTABLE_OFFSET::DECORATION_TEMPLE_SAND,
            VTABLE_OFFSET::DECORATION_COG,
            VTABLE_OFFSET::DECORATION_MOTHERSHIP,
            VTABLE_OFFSET::DECORATION_DUAT,
            VTABLE_OFFSET::DECORATION_DUAT_SAND,
            VTABLE_OFFSET::DECORATION_DUAT_DARKSAND,
            VTABLE_OFFSET::DECORATION_DUAT_DESTRUCTIBLE_BG,
            VTABLE_OFFSET::DECORATION_PALACE,
            VTABLE_OFFSET::DECORATION_PALACE_SIGN,
            VTABLE_OFFSET::DECORATION_PALACE_CHANDELIER,
            VTABLE_OFFSET::DECORATION_PALACE_PORTRAIT,
            VTABLE_OFFSET::DECORATION_GUTS,
            VTABLE_OFFSET::DECORATION_EGGPLANT_ALTAR,
            VTABLE_OFFSET::DECORATION_MOTHER_STATUE_HAND,
            VTABLE_OFFSET::DECORATION_PIPE,
            VTABLE_OFFSET::DECORATION_SUNKEN_BRIDGE,
            VTABLE_OFFSET::DECORATION_TOMB,
            VTABLE_OFFSET::DECORATION_LARGETOMB,
            VTABLE_OFFSET::DECORATION_REGENERATING_SMALL_BLOCK,
            VTABLE_OFFSET::DECORATION_REGENERATING_BORDER,
            VTABLE_OFFSET::DECORATION_SKULLDROP_TRAP,
            VTABLE_OFFSET::DECORATION_POTOFGOLD_RAINBOW,
            VTABLE_OFFSET::EMBED_GOLD,
            VTABLE_OFFSET::EMBED_GOLD_BIG,
            VTABLE_OFFSET::CHAR_ANA_SPELUNKY,
            VTABLE_OFFSET::CHAR_MARGARET_TUNNEL,
            VTABLE_OFFSET::CHAR_COLIN_NORTHWARD,
            VTABLE_OFFSET::CHAR_ROFFY_D_SLOTH,
            VTABLE_OFFSET::CHAR_BANDA,
            VTABLE_OFFSET::CHAR_GREEN_GIRL,
            VTABLE_OFFSET::CHAR_AMAZON,
            VTABLE_OFFSET::CHAR_LISE_SYSTEM,
            VTABLE_OFFSET::CHAR_COCO_VON_DIAMONDS,
            VTABLE_OFFSET::CHAR_MANFRED_TUNNEL,
            VTABLE_OFFSET::CHAR_OTAKU,
            VTABLE_OFFSET::CHAR_TINA_FLAN,
            VTABLE_OFFSET::CHAR_VALERIE_CRUMP,
            VTABLE_OFFSET::CHAR_AU,
            VTABLE_OFFSET::CHAR_DEMI_VON_DIAMONDS,
            VTABLE_OFFSET::CHAR_PILOT,
            VTABLE_OFFSET::CHAR_PRINCESS_AIRYN,
            VTABLE_OFFSET::CHAR_DIRK_YAMAOKA,
            VTABLE_OFFSET::CHAR_GUY_SPELUNKY,
            VTABLE_OFFSET::CHAR_CLASSIC_GUY,
            VTABLE_OFFSET::CHAR_HIREDHAND,
            VTABLE_OFFSET::CHAR_EGGPLANT_CHILD,
            VTABLE_OFFSET::MONS_PET_TUTORIAL,
            VTABLE_OFFSET::MONS_SNAKE,
            VTABLE_OFFSET::MONS_SPIDER,
            VTABLE_OFFSET::MONS_HANGSPIDER,
            VTABLE_OFFSET::MONS_GIANTSPIDER,
            VTABLE_OFFSET::MONS_BAT,
            VTABLE_OFFSET::MONS_CAVEMAN,
            VTABLE_OFFSET::MONS_CAVEMAN_SHOPKEEPER,
            VTABLE_OFFSET::MONS_SKELETON,
            VTABLE_OFFSET::MONS_REDSKELETON,
            VTABLE_OFFSET::MONS_SCORPION,
            VTABLE_OFFSET::MONS_HORNEDLIZARD,
            VTABLE_OFFSET::MONS_MOLE,
            VTABLE_OFFSET::MONS_CAVEMAN_BOSS,
            VTABLE_OFFSET::MONS_MANTRAP,
            VTABLE_OFFSET::MONS_TIKIMAN,
            VTABLE_OFFSET::MONS_WITCHDOCTOR,
            VTABLE_OFFSET::MONS_WITCHDOCTORSKULL,
            VTABLE_OFFSET::MONS_MOSQUITO,
            VTABLE_OFFSET::MONS_MONKEY,
            VTABLE_OFFSET::MONS_MAGMAMAN,
            VTABLE_OFFSET::MONS_ROBOT,
            VTABLE_OFFSET::MONS_FIREBUG,
            VTABLE_OFFSET::MONS_FIREBUG_UNCHAINED,
            VTABLE_OFFSET::MONS_IMP,
            VTABLE_OFFSET::MONS_LAVAMANDER,
            VTABLE_OFFSET::MONS_VAMPIRE,
            VTABLE_OFFSET::MONS_VLAD,
            VTABLE_OFFSET::MONS_CROCMAN,
            VTABLE_OFFSET::MONS_COBRA,
            VTABLE_OFFSET::MONS_MUMMY,
            VTABLE_OFFSET::MONS_SORCERESS,
            VTABLE_OFFSET::MONS_CATMUMMY,
            VTABLE_OFFSET::MONS_NECROMANCER,
            VTABLE_OFFSET::MONS_ANUBIS,
            VTABLE_OFFSET::MONS_APEP_HEAD,
            VTABLE_OFFSET::MONS_APEP_BODY,
            VTABLE_OFFSET::MONS_APEP_TAIL,
            VTABLE_OFFSET::MONS_OSIRIS_HEAD,
            VTABLE_OFFSET::MONS_OSIRIS_HAND,
            VTABLE_OFFSET::MONS_ANUBIS2,
            VTABLE_OFFSET::MONS_JIANGSHI,
            VTABLE_OFFSET::MONS_FEMALE_JIANGSHI,
            VTABLE_OFFSET::MONS_FISH,
            VTABLE_OFFSET::MONS_OCTOPUS,
            VTABLE_OFFSET::MONS_HERMITCRAB,
            VTABLE_OFFSET::MONS_GIANTFISH,
            VTABLE_OFFSET::MONS_UFO,
            VTABLE_OFFSET::MONS_ALIEN,
            VTABLE_OFFSET::MONS_YETI,
            VTABLE_OFFSET::MONS_YETIKING,
            VTABLE_OFFSET::MONS_YETIQUEEN,
            VTABLE_OFFSET::MONS_ALIENQUEEN,
            VTABLE_OFFSET::MONS_PROTOSHOPKEEPER,
            VTABLE_OFFSET::MONS_SHOPKEEPERCLONE,
            VTABLE_OFFSET::MONS_LAMASSU,
            VTABLE_OFFSET::MONS_OLMITE_HELMET,
            VTABLE_OFFSET::MONS_OLMITE_BODYARMORED,
            VTABLE_OFFSET::MONS_OLMITE_NAKED,
            VTABLE_OFFSET::MONS_BEE,
            VTABLE_OFFSET::MONS_QUEENBEE,
            VTABLE_OFFSET::MONS_AMMIT,
            VTABLE_OFFSET::MONS_KINGU,
            VTABLE_OFFSET::MONS_TIAMAT,
            VTABLE_OFFSET::MONS_FROG,
            VTABLE_OFFSET::MONS_FIREFROG,
            VTABLE_OFFSET::MONS_GIANTFROG,
            VTABLE_OFFSET::MONS_GRUB,
            VTABLE_OFFSET::MONS_TADPOLE,
            VTABLE_OFFSET::MONS_GIANTFLY,
            VTABLE_OFFSET::MONS_JUMPDOG,
            VTABLE_OFFSET::MONS_EGGPLANT_MINISTER,
            VTABLE_OFFSET::MONS_YAMA,
            VTABLE_OFFSET::MONS_HUNDUN,
            VTABLE_OFFSET::MONS_HUNDUN_BIRDHEAD,
            VTABLE_OFFSET::MONS_HUNDUN_SNAKEHEAD,
            VTABLE_OFFSET::MONS_SCARAB,
            VTABLE_OFFSET::MONS_SHOPKEEPER,
            VTABLE_OFFSET::MONS_MERCHANT,
            VTABLE_OFFSET::MONS_YANG,
            VTABLE_OFFSET::MONS_MARLA_TUNNEL,
            VTABLE_OFFSET::MONS_SISTER_PARSLEY,
            VTABLE_OFFSET::MONS_SISTER_PARSNIP,
            VTABLE_OFFSET::MONS_SISTER_PARMESAN,
            VTABLE_OFFSET::MONS_OLD_HUNTER,
            VTABLE_OFFSET::MONS_THIEF,
            VTABLE_OFFSET::MONS_MADAMETUSK,
            VTABLE_OFFSET::MONS_BODYGUARD,
            VTABLE_OFFSET::MONS_HUNDUNS_SERVANT,
            VTABLE_OFFSET::MONS_STORAGEGUY,
            VTABLE_OFFSET::MONS_GOLDMONKEY,
            VTABLE_OFFSET::MONS_LEPRECHAUN,
            VTABLE_OFFSET::MONS_CRABMAN,
            VTABLE_OFFSET::MONS_MEGAJELLYFISH,
            VTABLE_OFFSET::MONS_MEGAJELLYFISH_BACKGROUND,
            VTABLE_OFFSET::MONS_GHIST,
            VTABLE_OFFSET::MONS_GHIST_SHOPKEEPER,
            VTABLE_OFFSET::MONS_GHOST,
            VTABLE_OFFSET::MONS_GHOST_MEDIUM_SAD,
            VTABLE_OFFSET::MONS_GHOST_MEDIUM_HAPPY,
            VTABLE_OFFSET::MONS_GHOST_SMALL_ANGRY,
            VTABLE_OFFSET::MONS_GHOST_SMALL_SAD,
            VTABLE_OFFSET::MONS_GHOST_SMALL_SURPRISED,
            VTABLE_OFFSET::MONS_GHOST_SMALL_HAPPY,
            VTABLE_OFFSET::MONS_PET_DOG,
            VTABLE_OFFSET::MONS_PET_CAT,
            VTABLE_OFFSET::MONS_PET_HAMSTER,
            VTABLE_OFFSET::MONS_CRITTERDUNGBEETLE,
            VTABLE_OFFSET::MONS_CRITTERBUTTERFLY,
            VTABLE_OFFSET::MONS_CRITTERSNAIL,
            VTABLE_OFFSET::MONS_CRITTERFISH,
            VTABLE_OFFSET::MONS_CRITTERANCHOVY,
            VTABLE_OFFSET::MONS_CRITTERCRAB,
            VTABLE_OFFSET::MONS_CRITTERLOCUST,
            VTABLE_OFFSET::MONS_CRITTERPENGUIN,
            VTABLE_OFFSET::MONS_CRITTERFIREFLY,
            VTABLE_OFFSET::MONS_CRITTERDRONE,
            VTABLE_OFFSET::MONS_CRITTERSLIME,
            VTABLE_OFFSET::ITEM_WHIP,
            VTABLE_OFFSET::ITEM_WHIP_FLAME,
            VTABLE_OFFSET::ITEM_BOMB,
            VTABLE_OFFSET::ITEM_PASTEBOMB,
            VTABLE_OFFSET::ITEM_ROPE,
            VTABLE_OFFSET::ITEM_CLIMBABLE_ROPE,
            VTABLE_OFFSET::ITEM_UNROLLED_ROPE,
            VTABLE_OFFSET::ITEM_BLOOD,
            VTABLE_OFFSET::ITEM_EGGSHIP,
            VTABLE_OFFSET::ITEM_PARENTSSHIP,
            VTABLE_OFFSET::ITEM_OLMECSHIP,
            VTABLE_OFFSET::ITEM_IDOL,
            VTABLE_OFFSET::ITEM_MADAMETUSK_IDOL,
            VTABLE_OFFSET::ITEM_MADAMETUSK_IDOLNOTE,
            VTABLE_OFFSET::ITEM_HOLDTHEIDOL,
            VTABLE_OFFSET::ITEM_TOTEM_SPEAR,
            VTABLE_OFFSET::ITEM_JUNGLE_SPEAR_COSMETIC,
            VTABLE_OFFSET::ITEM_JUNGLE_SPEAR_DAMAGING,
            VTABLE_OFFSET::ITEM_LION_SPEAR,
            VTABLE_OFFSET::ITEM_BIG_SPEAR,
            VTABLE_OFFSET::ITEM_ROCK,
            VTABLE_OFFSET::ITEM_WEB,
            VTABLE_OFFSET::ITEM_WEBSHOT,
            VTABLE_OFFSET::ITEM_GIANTSPIDER_WEBSHOT,
            VTABLE_OFFSET::ITEM_HANGSTRAND,
            VTABLE_OFFSET::ITEM_HANGANCHOR,
            VTABLE_OFFSET::ITEM_WOODEN_ARROW,
            VTABLE_OFFSET::ITEM_BROKEN_ARROW,
            VTABLE_OFFSET::ITEM_METAL_ARROW,
            VTABLE_OFFSET::ITEM_LIGHT_ARROW,
            VTABLE_OFFSET::ITEM_PLASMACANNON_SHOT,
            VTABLE_OFFSET::ITEM_SCEPTER_ANUBISSHOT,
            VTABLE_OFFSET::ITEM_SCEPTER_ANUBISSPECIALSHOT,
            VTABLE_OFFSET::ITEM_SCEPTER_PLAYERSHOT,
            VTABLE_OFFSET::ITEM_UFO_LASER_SHOT,
            VTABLE_OFFSET::ITEM_LAMASSU_LASER_SHOT,
            VTABLE_OFFSET::ITEM_SORCERESS_DAGGER_SHOT,
            VTABLE_OFFSET::ITEM_LASERTRAP_SHOT,
            VTABLE_OFFSET::ITEM_SPARK,
            VTABLE_OFFSET::ITEM_TIAMAT_SHOT,
            VTABLE_OFFSET::ITEM_FIREBALL,
            VTABLE_OFFSET::ITEM_HUNDUN_FIREBALL,
            VTABLE_OFFSET::ITEM_FLAMETHROWER_FIREBALL,
            VTABLE_OFFSET::ITEM_LEAF,
            VTABLE_OFFSET::ITEM_ACIDSPIT,
            VTABLE_OFFSET::ITEM_INKSPIT,
            VTABLE_OFFSET::ITEM_ACIDBUBBLE,
            VTABLE_OFFSET::ITEM_CRABMAN_ACIDBUBBLE,
            VTABLE_OFFSET::ITEM_CRABMAN_CLAW,
            VTABLE_OFFSET::ITEM_CRABMAN_CLAWCHAIN,
            VTABLE_OFFSET::ITEM_CHEST,
            VTABLE_OFFSET::ITEM_VAULTCHEST,
            VTABLE_OFFSET::ITEM_ENDINGTREASURE_TIAMAT,
            VTABLE_OFFSET::ITEM_ENDINGTREASURE_HUNDUN,
            VTABLE_OFFSET::ITEM_KEY,
            VTABLE_OFFSET::ITEM_LOCKEDCHEST,
            VTABLE_OFFSET::ITEM_LOCKEDCHEST_KEY,
            VTABLE_OFFSET::ITEM_CRATE,
            VTABLE_OFFSET::ITEM_DMCRATE,
            VTABLE_OFFSET::ITEM_TUTORIAL_MONSTER_SIGN,
            VTABLE_OFFSET::ITEM_CONSTRUCTION_SIGN,
            VTABLE_OFFSET::ITEM_SHORTCUT_SIGN,
            VTABLE_OFFSET::ITEM_SPEEDRUN_SIGN,
            VTABLE_OFFSET::ITEM_BASECAMP_TUTORIAL_SIGN,
            VTABLE_OFFSET::ITEM_BOOMBOX,
            VTABLE_OFFSET::ITEM_TV,
            VTABLE_OFFSET::ITEM_TELESCOPE,
            VTABLE_OFFSET::ITEM_WALLTORCH,
            VTABLE_OFFSET::ITEM_WALLTORCHFLAME,
            VTABLE_OFFSET::ITEM_LITWALLTORCH,
            VTABLE_OFFSET::ITEM_AUTOWALLTORCH,
            VTABLE_OFFSET::ITEM_TORCH,
            VTABLE_OFFSET::ITEM_TORCHFLAME,
            VTABLE_OFFSET::ITEM_LAMP,
            VTABLE_OFFSET::ITEM_LAMPFLAME,
            VTABLE_OFFSET::ITEM_REDLANTERN,
            VTABLE_OFFSET::ITEM_REDLANTERNFLAME,
            VTABLE_OFFSET::ITEM_PRESENT,
            VTABLE_OFFSET::ITEM_GHIST_PRESENT,
            VTABLE_OFFSET::ITEM_BULLET,
            VTABLE_OFFSET::ITEM_FREEZERAYSHOT,
            VTABLE_OFFSET::ITEM_CLONEGUNSHOT,
            VTABLE_OFFSET::ITEM_ICECAGE,
            VTABLE_OFFSET::ITEM_BROKEN_MATTOCK,
            VTABLE_OFFSET::ITEM_PUNISHBALL,
            VTABLE_OFFSET::ITEM_PUNISHCHAIN,
            VTABLE_OFFSET::ITEM_CHAIN,
            VTABLE_OFFSET::ITEM_CHAIN_LASTPIECE,
            VTABLE_OFFSET::ITEM_SLIDINGWALL_CHAIN,
            VTABLE_OFFSET::ITEM_SLIDINGWALL_CHAIN_LASTPIECE,
            VTABLE_OFFSET::ITEM_COFFIN,
            VTABLE_OFFSET::ITEM_FLY,
            VTABLE_OFFSET::ITEM_OLMECCANNON_BOMBS,
            VTABLE_OFFSET::ITEM_OLMECCANNON_UFO,
            VTABLE_OFFSET::ITEM_LANDMINE,
            VTABLE_OFFSET::ITEM_CURSING_CLOUD,
            VTABLE_OFFSET::ITEM_UDJAT_SOCKET,
            VTABLE_OFFSET::ITEM_USHABTI,
            VTABLE_OFFSET::ITEM_TURKEY_NECK,
            VTABLE_OFFSET::ITEM_HONEY,
            VTABLE_OFFSET::ITEM_GIANTCLAM_TOP,
            VTABLE_OFFSET::ITEM_PLAYERGHOST,
            VTABLE_OFFSET::ITEM_PLAYERGHOST_BREATH,
            VTABLE_OFFSET::ITEM_DIE,
            VTABLE_OFFSET::ITEM_DICE_BET,
            VTABLE_OFFSET::ITEM_DICE_PRIZE_DISPENSER,
            VTABLE_OFFSET::ITEM_LASERBEAM,
            VTABLE_OFFSET::ITEM_HORIZONTALLASERBEAM,
            VTABLE_OFFSET::ITEM_ANUBIS_COFFIN,
            VTABLE_OFFSET::ITEM_SPIKES,
            VTABLE_OFFSET::ITEM_EGGSHIP_HOOK,
            VTABLE_OFFSET::ITEM_AXOLOTL_BUBBLESHOT,
            VTABLE_OFFSET::ITEM_POTOFGOLD,
            VTABLE_OFFSET::ITEM_STICKYTRAP_PIECE,
            VTABLE_OFFSET::ITEM_STICKYTRAP_LASTPIECE,
            VTABLE_OFFSET::ITEM_STICKYTRAP_BALL,
            VTABLE_OFFSET::ITEM_SKULLDROPTRAP,
            VTABLE_OFFSET::ITEM_FROZEN_LIQUID,
            VTABLE_OFFSET::ITEM_ALIVE_EMBEDDED_ON_ICE,
            VTABLE_OFFSET::ITEM_DEPLOYED_PARACHUTE,
            VTABLE_OFFSET::ITEM_SLIDINGWALL_SWITCH,
            VTABLE_OFFSET::ITEM_SLIDINGWALL_SWITCH_REWARD,
            VTABLE_OFFSET::ITEM_GIANTFLY_HEAD,
            VTABLE_OFFSET::ITEM_PALACE_CANDLE_FLAME,
            VTABLE_OFFSET::ITEM_SNAP_TRAP,
            VTABLE_OFFSET::ITEM_EMPRESS_GRAVE,
            VTABLE_OFFSET::ITEM_TENTACLE,
            VTABLE_OFFSET::ITEM_TENTACLE_PIECE,
            VTABLE_OFFSET::ITEM_TENTACLE_LAST_PIECE,
            VTABLE_OFFSET::ITEM_MINIGAME_SHIP,
            VTABLE_OFFSET::ITEM_MINIGAME_UFO,
            VTABLE_OFFSET::ITEM_MINIGAME_ASTEROID_BG,
            VTABLE_OFFSET::ITEM_MINIGAME_ASTEROID,
            VTABLE_OFFSET::ITEM_MINIGAME_BROKEN_ASTEROID,
            VTABLE_OFFSET::ITEM_POT,
            VTABLE_OFFSET::ITEM_CURSEDPOT,
            VTABLE_OFFSET::ITEM_SKULL,
            VTABLE_OFFSET::ITEM_BONES,
            VTABLE_OFFSET::ITEM_COOKFIRE,
            VTABLE_OFFSET::ITEM_LAVAPOT,
            VTABLE_OFFSET::ITEM_SCRAP,
            VTABLE_OFFSET::ITEM_EGGPLANT,
            VTABLE_OFFSET::ITEM_ICESPIRE,
            VTABLE_OFFSET::ITEM_PALACE_CANDLE,
            VTABLE_OFFSET::ITEM_SKULLDROPTRAP_SKULL,
            VTABLE_OFFSET::ITEM_FLOATING_ORB,
            VTABLE_OFFSET::ITEM_EGGSAC,
            VTABLE_OFFSET::ITEM_GOLDBAR,
            VTABLE_OFFSET::ITEM_GOLDBARS,
            VTABLE_OFFSET::ITEM_DIAMOND,
            VTABLE_OFFSET::ITEM_EMERALD,
            VTABLE_OFFSET::ITEM_SAPPHIRE,
            VTABLE_OFFSET::ITEM_RUBY,
            VTABLE_OFFSET::ITEM_NUGGET,
            VTABLE_OFFSET::ITEM_GOLDCOIN,
            VTABLE_OFFSET::ITEM_EMERALD_SMALL,
            VTABLE_OFFSET::ITEM_SAPPHIRE_SMALL,
            VTABLE_OFFSET::ITEM_RUBY_SMALL,
            VTABLE_OFFSET::ITEM_NUGGET_SMALL,
            VTABLE_OFFSET::ITEM_PICKUP_TORNJOURNALPAGE,
            VTABLE_OFFSET::ITEM_PICKUP_JOURNAL,
            VTABLE_OFFSET::ITEM_PICKUP_ROPE,
            VTABLE_OFFSET::ITEM_PICKUP_ROPEPILE,
            VTABLE_OFFSET::ITEM_PICKUP_BOMBBAG,
            VTABLE_OFFSET::ITEM_PICKUP_BOMBBOX,
            VTABLE_OFFSET::ITEM_PICKUP_12BAG,
            VTABLE_OFFSET::ITEM_PICKUP_24BAG,
            VTABLE_OFFSET::ITEM_PICKUP_ROYALJELLY,
            VTABLE_OFFSET::ITEM_PICKUP_COOKEDTURKEY,
            VTABLE_OFFSET::ITEM_PICKUP_GIANTFOOD,
            VTABLE_OFFSET::ITEM_PICKUP_ELIXIR,
            VTABLE_OFFSET::ITEM_PICKUP_CLOVER,
            VTABLE_OFFSET::ITEM_PICKUP_SEEDEDRUNSUNLOCKER,
            VTABLE_OFFSET::ITEM_PICKUP_SPECTACLES,
            VTABLE_OFFSET::ITEM_PICKUP_CLIMBINGGLOVES,
            VTABLE_OFFSET::ITEM_PICKUP_PITCHERSMITT,
            VTABLE_OFFSET::ITEM_PICKUP_SPRINGSHOES,
            VTABLE_OFFSET::ITEM_PICKUP_SPIKESHOES,
            VTABLE_OFFSET::ITEM_PICKUP_PASTE,
            VTABLE_OFFSET::ITEM_PICKUP_COMPASS,
            VTABLE_OFFSET::ITEM_PICKUP_SPECIALCOMPASS,
            VTABLE_OFFSET::ITEM_PICKUP_PARACHUTE,
            VTABLE_OFFSET::ITEM_PICKUP_UDJATEYE,
            VTABLE_OFFSET::ITEM_PICKUP_KAPALA,
            VTABLE_OFFSET::ITEM_PICKUP_HEDJET,
            VTABLE_OFFSET::ITEM_PICKUP_CROWN,
            VTABLE_OFFSET::ITEM_PICKUP_EGGPLANTCROWN,
            VTABLE_OFFSET::ITEM_PICKUP_TRUECROWN,
            VTABLE_OFFSET::ITEM_PICKUP_ANKH,
            VTABLE_OFFSET::ITEM_PICKUP_TABLETOFDESTINY,
            VTABLE_OFFSET::ITEM_PICKUP_SKELETON_KEY,
            VTABLE_OFFSET::ITEM_PICKUP_PLAYERBAG,
            VTABLE_OFFSET::ITEM_POWERUP_PASTE,
            VTABLE_OFFSET::ITEM_POWERUP_CLIMBING_GLOVES,
            VTABLE_OFFSET::ITEM_POWERUP_SPIKE_SHOES,
            VTABLE_OFFSET::ITEM_POWERUP_SPRING_SHOES,
            VTABLE_OFFSET::ITEM_POWERUP_KAPALA,
            VTABLE_OFFSET::ITEM_POWERUP_SPECTACLES,
            VTABLE_OFFSET::ITEM_POWERUP_PITCHERSMITT,
            VTABLE_OFFSET::ITEM_POWERUP_UDJATEYE,
            VTABLE_OFFSET::ITEM_POWERUP_PARACHUTE,
            VTABLE_OFFSET::ITEM_POWERUP_COMPASS,
            VTABLE_OFFSET::ITEM_POWERUP_SPECIALCOMPASS,
            VTABLE_OFFSET::ITEM_POWERUP_HEDJET,
            VTABLE_OFFSET::ITEM_POWERUP_CROWN,
            VTABLE_OFFSET::ITEM_POWERUP_EGGPLANTCROWN,
            VTABLE_OFFSET::ITEM_POWERUP_TRUECROWN,
            VTABLE_OFFSET::ITEM_POWERUP_ANKH,
            VTABLE_OFFSET::ITEM_POWERUP_TABLETOFDESTINY,
            VTABLE_OFFSET::ITEM_POWERUP_SKELETON_KEY,
            VTABLE_OFFSET::ITEM_CAPE,
            VTABLE_OFFSET::ITEM_VLADS_CAPE,
            VTABLE_OFFSET::ITEM_PURCHASABLE_CAPE,
            VTABLE_OFFSET::ITEM_JETPACK,
            VTABLE_OFFSET::ITEM_JETPACK_MECH,
            VTABLE_OFFSET::ITEM_PURCHASABLE_JETPACK,
            VTABLE_OFFSET::ITEM_TELEPORTER_BACKPACK,
            VTABLE_OFFSET::ITEM_PURCHASABLE_TELEPORTER_BACKPACK,
            VTABLE_OFFSET::ITEM_HOVERPACK,
            VTABLE_OFFSET::ITEM_PURCHASABLE_HOVERPACK,
            VTABLE_OFFSET::ITEM_POWERPACK,
            VTABLE_OFFSET::ITEM_PURCHASABLE_POWERPACK,
            VTABLE_OFFSET::ITEM_WEBGUN,
            VTABLE_OFFSET::ITEM_SHOTGUN,
            VTABLE_OFFSET::ITEM_FREEZERAY,
            VTABLE_OFFSET::ITEM_CROSSBOW,
            VTABLE_OFFSET::ITEM_CAMERA,
            VTABLE_OFFSET::ITEM_TELEPORTER,
            VTABLE_OFFSET::ITEM_MATTOCK,
            VTABLE_OFFSET::ITEM_BOOMERANG,
            VTABLE_OFFSET::ITEM_MACHETE,
            VTABLE_OFFSET::ITEM_EXCALIBUR,
            VTABLE_OFFSET::ITEM_BROKENEXCALIBUR,
            VTABLE_OFFSET::ITEM_PLASMACANNON,
            VTABLE_OFFSET::ITEM_SCEPTER,
            VTABLE_OFFSET::ITEM_CLONEGUN,
            VTABLE_OFFSET::ITEM_HOUYIBOW,
            VTABLE_OFFSET::ITEM_WOODEN_SHIELD,
            VTABLE_OFFSET::ITEM_METAL_SHIELD,
            VTABLE_OFFSET::ACTIVEFLOOR_EGGSHIPPLATFORM,
            VTABLE_OFFSET::ACTIVEFLOOR_EGGSHIPBLOCKER,
            VTABLE_OFFSET::ACTIVEFLOOR_WOODENLOG_TRAP,
            VTABLE_OFFSET::ACTIVEFLOOR_BOULDER,
            VTABLE_OFFSET::ACTIVEFLOOR_PUSHBLOCK,
            VTABLE_OFFSET::ACTIVEFLOOR_BONEBLOCK,
            VTABLE_OFFSET::ACTIVEFLOOR_BUSHBLOCK,
            VTABLE_OFFSET::ACTIVEFLOOR_POWDERKEG,
            VTABLE_OFFSET::ACTIVEFLOOR_CHAINEDPUSHBLOCK,
            VTABLE_OFFSET::ACTIVEFLOOR_METALARROWPLATFORM,
            VTABLE_OFFSET::ACTIVEFLOOR_LIGHTARROWPLATFORM,
            VTABLE_OFFSET::ACTIVEFLOOR_FALLING_PLATFORM,
            VTABLE_OFFSET::ACTIVEFLOOR_CHAINED_SPIKEBALL,
            VTABLE_OFFSET::ACTIVEFLOOR_UNCHAINED_SPIKEBALL,
            VTABLE_OFFSET::ACTIVEFLOOR_DRILL,
            VTABLE_OFFSET::ACTIVEFLOOR_CRUSH_TRAP,
            VTABLE_OFFSET::ACTIVEFLOOR_CRUSH_TRAP_LARGE,
            VTABLE_OFFSET::ACTIVEFLOOR_OLMEC,
            VTABLE_OFFSET::ACTIVEFLOOR_TIMEDPOWDERKEG,
            VTABLE_OFFSET::ACTIVEFLOOR_SLIDINGWALL,
            VTABLE_OFFSET::ACTIVEFLOOR_THINICE,
            VTABLE_OFFSET::ACTIVEFLOOR_ELEVATOR,
            VTABLE_OFFSET::ACTIVEFLOOR_GIANTCLAM_BASE,
            VTABLE_OFFSET::ACTIVEFLOOR_KINGU_PLATFORM,
            VTABLE_OFFSET::ACTIVEFLOOR_TIAMAT_PLATFORM,
            VTABLE_OFFSET::ACTIVEFLOOR_TIAMAT_SHOULDERPLATFORM,
            VTABLE_OFFSET::ACTIVEFLOOR_BUBBLE_PLATFORM,
            VTABLE_OFFSET::ACTIVEFLOOR_CRUSHING_ELEVATOR,
            VTABLE_OFFSET::ACTIVEFLOOR_SHIELD,
            VTABLE_OFFSET::ACTIVEFLOOR_REGENERATINGBLOCK,
            VTABLE_OFFSET::FX_EGGSHIP_SHELL,
            VTABLE_OFFSET::FX_EGGSHIP_DOOR,
            VTABLE_OFFSET::FX_EGGSHIP_CENTERJETFLAME,
            VTABLE_OFFSET::FX_EGGSHIP_JETFLAME,
            VTABLE_OFFSET::FX_EGGSHIP_SHADOW,
            VTABLE_OFFSET::FX_SHADOW,
            VTABLE_OFFSET::FX_TORNJOURNALPAGE,
            VTABLE_OFFSET::FX_MAIN_EXIT_DOOR,
            VTABLE_OFFSET::FX_BIRDIES,
            VTABLE_OFFSET::FX_EXPLOSION,
            VTABLE_OFFSET::FX_POWEREDEXPLOSION,
            VTABLE_OFFSET::FX_MODERNEXPLOSION,
            VTABLE_OFFSET::FX_OUROBORO_OCCLUDER,
            VTABLE_OFFSET::FX_OUROBORO_HEAD,
            VTABLE_OFFSET::FX_OUROBORO_TAIL,
            VTABLE_OFFSET::FX_OUROBORO_TEXT,
            VTABLE_OFFSET::FX_OUROBORO_TRAIL,
            VTABLE_OFFSET::ITEM_RUBBLE,
            VTABLE_OFFSET::FX_COMPASS,
            VTABLE_OFFSET::FX_SPECIALCOMPASS,
            VTABLE_OFFSET::FX_PLAYERINDICATOR,
            VTABLE_OFFSET::FX_PLAYERINDICATORPORTRAIT,
            VTABLE_OFFSET::FX_SALEICON,
            VTABLE_OFFSET::FX_SALEDIALOG_CONTAINER,
            VTABLE_OFFSET::FX_SALEDIALOG_TITLE,
            VTABLE_OFFSET::FX_SALEDIALOG_VALUE,
            VTABLE_OFFSET::FX_SALEDIALOG_ICON,
            VTABLE_OFFSET::FX_PICKUPEFFECT,
            VTABLE_OFFSET::FX_SHOTGUNBLAST,
            VTABLE_OFFSET::FX_JETPACKFLAME,
            VTABLE_OFFSET::FX_SMALLFLAME,
            VTABLE_OFFSET::FX_SPRINGTRAP_RING,
            VTABLE_OFFSET::FX_WITCHDOCTOR_HINT,
            VTABLE_OFFSET::FX_NECROMANCER_ANKH,
            VTABLE_OFFSET::FX_TELEPORTSHADOW,
            VTABLE_OFFSET::FX_CINEMATIC_BLACKBAR,
            VTABLE_OFFSET::FX_OLMECPART_FLOATER,
            VTABLE_OFFSET::FX_OLMECPART_LARGE,
            VTABLE_OFFSET::FX_OLMECPART_MEDIUM,
            VTABLE_OFFSET::FX_OLMECPART_SMALL,
            VTABLE_OFFSET::FX_OLMECPART_SMALLEST,
            VTABLE_OFFSET::FX_WEBBEDEFFECT,
            VTABLE_OFFSET::FX_BUTTON,
            VTABLE_OFFSET::FX_BUTTON_DIALOG,
            VTABLE_OFFSET::FX_SLEEP_BUBBLE,
            VTABLE_OFFSET::FX_INK_BLINDNESS,
            VTABLE_OFFSET::FX_INK_SPLAT,
            VTABLE_OFFSET::FX_LAVA_BUBBLE,
            VTABLE_OFFSET::FX_LAVA_GLOW,
            VTABLE_OFFSET::FX_UNDERWATER_BUBBLE,
            VTABLE_OFFSET::FX_WATER_DROP,
            VTABLE_OFFSET::FX_WATER_SPLASH,
            VTABLE_OFFSET::FX_WATER_SURFACE,
            VTABLE_OFFSET::FX_APEP_FIRE,
            VTABLE_OFFSET::FX_APEP_MOUTHPIECE,
            VTABLE_OFFSET::FX_DRILL_TURNING,
            VTABLE_OFFSET::FX_LEADER_FLAG,
            VTABLE_OFFSET::FX_KINGU_HEAD,
            VTABLE_OFFSET::FX_KINGU_SHADOW,
            VTABLE_OFFSET::FX_KINGU_PLATFORM,
            VTABLE_OFFSET::FX_KINGU_LIMB,
            VTABLE_OFFSET::FX_KINGU_SLIDING,
            VTABLE_OFFSET::FX_ALIENQUEEN_EYEBALL,
            VTABLE_OFFSET::FX_ALIENQUEEN_EYE,
            VTABLE_OFFSET::FX_ALIENBLAST_RETICULE_INTERNAL,
            VTABLE_OFFSET::FX_ALIENBLAST_RETICULE_EXTERNAL,
            VTABLE_OFFSET::FX_ALIENBLAST,
            VTABLE_OFFSET::FX_SPARK,
            VTABLE_OFFSET::FX_SPARK_SMALL,
            VTABLE_OFFSET::FX_TIAMAT_THRONE,
            VTABLE_OFFSET::FX_TIAMAT_WAIST,
            VTABLE_OFFSET::FX_TIAMAT_TAIL,
            VTABLE_OFFSET::FX_TIAMAT_TAIL_DECO1,
            VTABLE_OFFSET::FX_TIAMAT_TAIL_DECO2,
            VTABLE_OFFSET::FX_TIAMAT_TAIL_DECO3,
            VTABLE_OFFSET::FX_TIAMAT_TORSO,
            VTABLE_OFFSET::FX_TIAMAT_ARM_LEFT1,
            VTABLE_OFFSET::FX_TIAMAT_ARM_LEFT2,
            VTABLE_OFFSET::FX_TIAMAT_ARM_LEFT3,
            VTABLE_OFFSET::FX_TIAMAT_ARM_RIGHT1,
            VTABLE_OFFSET::FX_TIAMAT_ARM_RIGHT2,
            VTABLE_OFFSET::FX_TIAMAT_NECK,
            VTABLE_OFFSET::FX_TIAMAT_HEAD,
            VTABLE_OFFSET::FX_DIEINDICATOR,
            VTABLE_OFFSET::FX_STORAGE_INDICATOR,
            VTABLE_OFFSET::FX_LASERBEAM,
            VTABLE_OFFSET::FX_HORIZONTALLASERBEAM,
            VTABLE_OFFSET::FX_VAT_BUBBLE,
            VTABLE_OFFSET::FX_CRUSHINGELEVATOR_FILL,
            VTABLE_OFFSET::FX_CRUSHINGELEVATOR_DECO,
            VTABLE_OFFSET::FX_HUNDUN_LIMB_THIGH,
            VTABLE_OFFSET::FX_HUNDUN_LIMB_CALF,
            VTABLE_OFFSET::FX_HUNDUN_LIMB_FOOT,
            VTABLE_OFFSET::FX_HUNDUN_EGG_CRACK,
            VTABLE_OFFSET::FX_HUNDUN_NECK_PIECE,
            VTABLE_OFFSET::FX_HUNDUN_WING,
            VTABLE_OFFSET::FX_HUNDUN_EYELID,
            VTABLE_OFFSET::FX_HUNDUN_EYEBALL,
            VTABLE_OFFSET::FX_HUNDUN_EYE,
            VTABLE_OFFSET::FX_PORTAL,
            VTABLE_OFFSET::FX_MEGAJELLYFISH_CROWN,
            VTABLE_OFFSET::FX_MEGAJELLYFISH_EYE,
            VTABLE_OFFSET::FX_MEGAJELLYFISH_STAR,
            VTABLE_OFFSET::FX_MEGAJELLYFISH_FLIPPER,
            VTABLE_OFFSET::FX_MEGAJELLYFISH_BOTTOM,
            VTABLE_OFFSET::FX_MEGAJELLYFISH_TAIL,
            VTABLE_OFFSET::FX_MEGAJELLYFISH_TAIL_BG,
            VTABLE_OFFSET::FX_ANUBIS_SPECIAL_SHOT_RETICULE,
            VTABLE_OFFSET::FX_MECH_COLLAR,
            VTABLE_OFFSET::FX_QUICKSAND_DUST,
            VTABLE_OFFSET::FX_QUICKSAND_RUBBLE,
            VTABLE_OFFSET::FX_SORCERESS_ATTACK,
            VTABLE_OFFSET::FX_LAMASSU_ATTACK,
            VTABLE_OFFSET::FX_CRITTERFIREFLY_LIGHT,
            VTABLE_OFFSET::FX_AXOLOTL_HEAD_ENTERING_DOOR,
            VTABLE_OFFSET::FX_BASECAMP_COUCH_ARM,
            VTABLE_OFFSET::FX_EMPRESS,
            VTABLE_OFFSET::FX_EGGSHIP_HOOK_CHAIN,
            VTABLE_OFFSET::FX_MINIGAME_SHIP_DOOR,
            VTABLE_OFFSET::FX_MINIGAME_SHIP_CENTERJETFLAME,
            VTABLE_OFFSET::FX_MINIGAME_SHIP_JETFLAME,
            VTABLE_OFFSET::FX_ANKH_ROTATINGSPARK,
            VTABLE_OFFSET::FX_ANKH_FALLINGSPARK,
            VTABLE_OFFSET::FX_ANKH_BACKGLOW,
            VTABLE_OFFSET::FX_ANKH_FRONTGLOW,
            VTABLE_OFFSET::FX_ANKH_LIGHTBEAM,
            VTABLE_OFFSET::FX_ANKH_BROKENPIECE,
            VTABLE_OFFSET::BG_SPACE,
            VTABLE_OFFSET::BG_SURFACE_STAR,
            VTABLE_OFFSET::BG_SURFACE_SHOOTING_STAR,
            VTABLE_OFFSET::BG_SURFACE_SHOOTING_STAR_TRAIL,
            VTABLE_OFFSET::BG_SURFACE_SHOOTING_STAR_TRAIL_PARTICLE,
            VTABLE_OFFSET::BG_SURFACE_MOVING_STAR,
            VTABLE_OFFSET::BG_SURFACE_NEBULA,
            VTABLE_OFFSET::BG_SURFACE_LAYER,
            VTABLE_OFFSET::BG_SURFACE_LAYER_OCCLUDER,
            VTABLE_OFFSET::BG_SURFACE_LAYER_HOLE,
            VTABLE_OFFSET::BG_SURFACE_ENTITY,
            VTABLE_OFFSET::BG_SURFACE_OLMEC_LAYER,
            VTABLE_OFFSET::BG_SURFACE_BACKGROUNDSEAM,
            VTABLE_OFFSET::BG_CONSTELLATION_FLASH,
            VTABLE_OFFSET::BG_CONSTELLATION_STAR,
            VTABLE_OFFSET::BG_CONSTELLATION_HALO,
            VTABLE_OFFSET::BG_CONSTELLATION_GLOW,
            VTABLE_OFFSET::BG_CONSTELLATION_CONNECTION,
            VTABLE_OFFSET::BG_EGGSHIP_ROOM,
            VTABLE_OFFSET::BG_PARENTSHIP_LANDINGLEG,
            VTABLE_OFFSET::BG_ENDINGTREASURE_HUNDUN_GOLD,
            VTABLE_OFFSET::BG_LEVEL_BACKWALL,
            VTABLE_OFFSET::BG_LEVEL_DECO,
            VTABLE_OFFSET::BG_LEVEL_SHADOW,
            VTABLE_OFFSET::BG_LEVEL_BOMB_SOOT,
            VTABLE_OFFSET::BG_LEVEL_POWEREDBOMB_SOOT,
            VTABLE_OFFSET::BG_DOOR_LARGE,
            VTABLE_OFFSET::BG_DOOR,
            VTABLE_OFFSET::BG_DOOR_FRONT_LAYER,
            VTABLE_OFFSET::BG_DOOR_BACK_LAYER,
            VTABLE_OFFSET::BG_DOOR_GHIST_SHOP,
            VTABLE_OFFSET::BG_DOOR_BLACK_MARKET,
            VTABLE_OFFSET::BG_DOOR_COG,
            VTABLE_OFFSET::BG_DOOR_OLMEC_SHIP,
            VTABLE_OFFSET::BG_DOOR_EGGPLANT_WORLD,
            VTABLE_OFFSET::BG_TUTORIAL_SIGN_BACK,
            VTABLE_OFFSET::BG_TUTORIAL_SIGN_FRONT,
            VTABLE_OFFSET::BG_OUROBORO,
            VTABLE_OFFSET::BG_DOORGEM,
            VTABLE_OFFSET::BG_BASECAMP_DRESSER,
            VTABLE_OFFSET::BG_BASECAMP_BUNKBED,
            VTABLE_OFFSET::BG_BASECAMP_SIDETABLE,
            VTABLE_OFFSET::BG_BASECAMP_DININGTABLE_DISHES,
            VTABLE_OFFSET::BG_BASECAMP_SHORTCUTSTATIONBANNER,
            VTABLE_OFFSET::BG_SHOP,
            VTABLE_OFFSET::BG_SHOP_ENTRANCEDOOR,
            VTABLE_OFFSET::BG_SHOP_BACKDOOR,
            VTABLE_OFFSET::BG_SHOPWANTEDPOSTER,
            VTABLE_OFFSET::BG_SHOPWANTEDPORTRAIT,
            VTABLE_OFFSET::BG_SHOP_DICEPOSTER,
            VTABLE_OFFSET::BG_KALI_STATUE,
            VTABLE_OFFSET::MIDBG,
            VTABLE_OFFSET::MIDBG_STYLEDDECORATION,
            VTABLE_OFFSET::MIDBG_PALACE_STYLEDDECORATION,
            VTABLE_OFFSET::MIDBG_BEEHIVE,
            VTABLE_OFFSET::MIDBG_PLATFORM_STRUCTURE,
            VTABLE_OFFSET::BG_UDJATSOCKET_DECORATION,
            VTABLE_OFFSET::BG_DRILL_INDICATOR,
            VTABLE_OFFSET::BG_VLAD_WINDOW,
            VTABLE_OFFSET::BG_CROWN_STATUE,
            VTABLE_OFFSET::BG_ANUBIS_THRONE,
            VTABLE_OFFSET::BG_OLMEC_PILLAR,
            VTABLE_OFFSET::BG_ICE_CRYSTAL,
            VTABLE_OFFSET::BG_DUAT_LAYER,
            VTABLE_OFFSET::BG_DUAT_SIDE_DECORATION,
            VTABLE_OFFSET::BG_DUAT_PYRAMID_LAYER,
            VTABLE_OFFSET::BG_DUAT_BLOODMOON,
            VTABLE_OFFSET::BG_DUAT_FLOATINGDEBRIS,
            VTABLE_OFFSET::BG_DUAT_FARFLOATINGDEBRIS,
            VTABLE_OFFSET::BG_BOULDER_STATUE,
            VTABLE_OFFSET::BG_MOAI_STATUE,
            VTABLE_OFFSET::BG_VAT_BACK,
            VTABLE_OFFSET::BG_VAT_SHOPKEEPER_PRIME,
            VTABLE_OFFSET::BG_VAT_FRONT,
            VTABLE_OFFSET::BG_PALACE_CANDLE,
            VTABLE_OFFSET::BG_PALACE_DISHES,
            VTABLE_OFFSET::BG_MOTHER_STATUE,
            VTABLE_OFFSET::BG_WATER_FOUNTAIN,
            VTABLE_OFFSET::BG_YAMA_BODY,
            VTABLE_OFFSET::BG_LEVEL_COSMIC,
            VTABLE_OFFSET::BG_COSMIC_FLOATINGDEBRIS,
            VTABLE_OFFSET::BG_COSMIC_FARFLOATINGDEBRIS,
            VTABLE_OFFSET::BG_EGGSAC_STAINS,
            VTABLE_OFFSET::LOGICAL_CONSTELLATION,
            VTABLE_OFFSET::LOGICAL_SHOOTING_STARS_SPAWNER,
            VTABLE_OFFSET::LOGICAL_DOOR,
            VTABLE_OFFSET::LOGICAL_DOOR_AMBIENT_SOUND,
            VTABLE_OFFSET::LOGICAL_BLACKMARKET_DOOR,
            VTABLE_OFFSET::LOGICAL_ARROW_TRAP_TRIGGER,
            VTABLE_OFFSET::LOGICAL_TOTEM_TRAP_TRIGGER,
            VTABLE_OFFSET::LOGICAL_JUNGLESPEAR_TRAP_TRIGGER,
            VTABLE_OFFSET::LOGICAL_SPIKEBALL_TRIGGER,
            VTABLE_OFFSET::LOGICAL_CRUSH_TRAP_TRIGGER,
            VTABLE_OFFSET::LOGICAL_TENTACLE_TRIGGER,
            VTABLE_OFFSET::LOGICAL_WET_EFFECT,
            VTABLE_OFFSET::LOGICAL_ONFIRE_EFFECT,
            VTABLE_OFFSET::LOGICAL_POISONED_EFFECT,
            VTABLE_OFFSET::LOGICAL_CURSED_EFFECT,
            VTABLE_OFFSET::LOGICAL_CAMERA_ANCHOR,
            VTABLE_OFFSET::LOGICAL_OUROBORO_CAMERA_ANCHOR,
            VTABLE_OFFSET::LOGICAL_OUROBORO_CAMERA_ANCHOR_ZOOMIN,
            VTABLE_OFFSET::LOGICAL_CINEMATIC_ANCHOR,
            VTABLE_OFFSET::LOGICAL_BURNING_ROPE_EFFECT,
            VTABLE_OFFSET::LOGICAL_DUSTWALL_APEP,
            VTABLE_OFFSET::LOGICAL_CAMERA_FLASH,
            VTABLE_OFFSET::LOGICAL_ROOM_LIGHT,
            VTABLE_OFFSET::LOGICAL_LIMB_ANCHOR,
            VTABLE_OFFSET::LOGICAL_PORTAL,
            VTABLE_OFFSET::LOGICAL_STATICLAVA_SOUND_SOURCE,
            VTABLE_OFFSET::LOGICAL_STREAMLAVA_SOUND_SOURCE,
            VTABLE_OFFSET::LOGICAL_STREAMWATER_SOUND_SOURCE,
            VTABLE_OFFSET::LOGICAL_CONVEYORBELT_SOUND_SOURCE,
            VTABLE_OFFSET::LOGICAL_ANCHOVY_FLOCK,
            VTABLE_OFFSET::LOGICAL_MUMMYFLIES_SOUND_SOURCE,
            VTABLE_OFFSET::LOGICAL_QUICKSAND_AMBIENT_SOUND_SOURCE,
            VTABLE_OFFSET::LOGICAL_QUICKSAND_SOUND_SOURCE,
            VTABLE_OFFSET::LOGICAL_DUSTWALL_SOUND_SOURCE,
            VTABLE_OFFSET::LOGICAL_ICESLIDING_SOUND_SOURCE,
            VTABLE_OFFSET::LOGICAL_PIPE_TRAVELER_SOUND_SOURCE,
            VTABLE_OFFSET::LOGICAL_BOULDERSPAWNER,
            VTABLE_OFFSET::LOGICAL_WATER_DRAIN,
            VTABLE_OFFSET::LOGICAL_LAVA_DRAIN,
            VTABLE_OFFSET::LOGICAL_REGENERATING_BLOCK,
            VTABLE_OFFSET::LOGICAL_BIGSPEAR_TRAP_TRIGGER,
            VTABLE_OFFSET::LOGICAL_PLATFORM_SPAWNER,
            VTABLE_OFFSET::LOGICAL_DM_SPAWN_POINT,
            VTABLE_OFFSET::LOGICAL_DM_CAMERA_ANCHOR,
            VTABLE_OFFSET::LOGICAL_DM_DEATH_MIST,
            VTABLE_OFFSET::LOGICAL_DM_ALIEN_BLAST,
            VTABLE_OFFSET::LOGICAL_DM_CRATE_SPAWNING,
            VTABLE_OFFSET::LOGICAL_DM_IDOL_SPAWNING,
            VTABLE_OFFSET::LOGICAL_SPLASH_BUBBLE_GENERATOR,
            VTABLE_OFFSET::LOGICAL_FROST_BREATH,
            VTABLE_OFFSET::LOGICAL_EGGPLANT_THROWER,
            VTABLE_OFFSET::LOGICAL_MINIGAME,
            VTABLE_OFFSET::MOUNT_TURKEY,
            VTABLE_OFFSET::MOUNT_ROCKDOG,
            VTABLE_OFFSET::MOUNT_AXOLOTL,
            VTABLE_OFFSET::MOUNT_MECH,
            VTABLE_OFFSET::MOUNT_QILIN,
            VTABLE_OFFSET::MOUNT_BASECAMP_CHAIR,
            VTABLE_OFFSET::MOUNT_BASECAMP_COUCH,
            VTABLE_OFFSET::LIQUID_WATER,
            VTABLE_OFFSET::LIQUID_COARSE_WATER,
            VTABLE_OFFSET::LIQUID_IMPOSTOR_LAKE,
            VTABLE_OFFSET::LIQUID_LAVA,
            VTABLE_OFFSET::LIQUID_STAGNANT_LAVA,
            VTABLE_OFFSET::LIQUID_IMPOSTOR_LAVA,
            VTABLE_OFFSET::LIQUID_COARSE_LAVA};
        const size_t* vtable_off = (size_t*)get_address("virtual_functions_table");

        std::vector<EntityItem> names = list_entities();

        std::sort(names.begin(), names.end(), [](EntityItem a, EntityItem b)
                  { return a.id < b.id; });

        std::set<size_t> base_functions;
        for (const auto& it : offsets)
        {
            base_functions.insert(*(vtable_off + (size_t)it));
        }

        const size_t func_ret = *(vtable_off + (size_t)VTABLE_OFFSET::DECORATION_GENERIC + 2);
        const size_t func_ret_0 = *(vtable_off + (size_t)VTABLE_OFFSET::DECORATION_GENERIC + 11);
        const size_t func_ret_1 = *(vtable_off + (size_t)VTABLE_OFFSET::FLOOR_DUSTWALL + 11);

        const auto base_off = (size_t)Memory::get().exe();

        file << "TypeID,Name,vtable offset,~Entity,create_rendering_info,handle_state_machine,kill,on_collision1,destroy,apply_texture,format_shopitem_name,generate_stomp_damage_particles,get_type_field_a8,block_pushing_related,v11,v12,check_type_properties_flags_19,get_type_field_60,set_invisible,handle_turning_left,set_draw_depth,resume_ai,friction,v20,remove_item_ptr,"
                "get_held_entity,v23,trigger_action,on_attempt_shop_purchase,on_collision2,get_metadata,apply_metadata,on_walked_on_by,on_walked_off_by,v31,on_stood_on_by,toggle_backlayer_illumination,v34,liberate_from_shop,apply_db,END OF ENTITY,can_jump,v38,sprint_factor,calculate_jump_height,get_animation_map,apply_velocity,stomp_damage,stomp_damage_trampoline,is_on_fire,v46,v47,"
                "on_regular_damage,on_stun_damage,v50,stun,freeze,light_on_fire,set_cursed,on_spiderweb_collision,set_last_owner_uid_b127,get_last_owner_uid,check_out_of_bounds,v59,standing_on,on_stomped_on_by,on_thrown_by,on_clonegunshot_hit,get_type_id,doesnt_have_spikeshoes,is_player_mount_or_monster,pick_up,picked_up_by,drop,add_money,apply_movement,damage_entity,is_monster_or_player,"
                "initialize,check_is_falling,handle_stun_transition_animation,process_input,post_collision_damage_related,picked_up,hired_hand_related,generate_fall_poof_particles,handle_fall_logic,apply_friction,boss_related,tusk_last_owner_uid_related,gravity_related,v87,v88,stack_plus_28_is_0,on_crushed_by,on_fall_onto,on_instakill_death,END OF MOVABLE,v93,v94,v95,v96,v97,v98,v99,v100,v101,v102,v103,v104,v105,v106,v107,v108,v109,";
        file << std::endl;

        int idx = 0;
        for (const auto& it : names)
        {
            if (it.id)
            {
                const size_t record = (size_t) * (offsets.begin() + idx);
                const auto vtable_b = vtable_off + record;

                file << std::dec << it.id << "," << it.name
                     << "," << record;

                auto v_idx = 0;
                file << std::hex;
                do
                {
                    if (v_idx && base_functions.find(*(vtable_b + v_idx)) != base_functions.end())
                        break;

                    if (*(vtable_b + v_idx) == func_ret)
                    {
                        file << ",ret";
                    }
                    else if (*(vtable_b + v_idx) == func_ret_0)
                    {
                        file << ",ret 0";
                    }
                    else if (*(vtable_b + v_idx) == func_ret_1)
                    {
                        file << ",ret true";
                    }
                    else
                    {
                        file << ",0x" << (*(vtable_b + v_idx) - base_off);
                    }

                    if (v_idx == 36)
                    {
                        file << ",END OF ENTITY";
                    }
                    else if (v_idx == 92)
                    {
                        file << ",END OF MOVABLE";
                    }

                    ++v_idx;
                } while (*(vtable_b + v_idx) && v_idx < 1000);
                file << std::endl;
                ++idx;
            }
        }
    }
    else
    {
        MessageBox(NULL, "file error", NULL, MB_OK);
    }
}

FLOAT_JSON_DEFINE_TYPE_NON_INTRUSIVE(Animation, texture, count, interval, key, repeat);
FLOAT_JSON_DEFINE_TYPE_NON_INTRUSIVE(Rect, offsetx, offsety, hitboxx, hitboxy);
void to_json(float_json& j, const EntityDB& ent)
{
    j = float_json{
        {"id", ent.id},
        {"search_flags", ent.search_flags},
        {"width", ent.width},
        {"height", ent.height},
        {"rect_collision", ent.default_collision_info.rect},
        {"friction", ent.friction},
        {"elasticity", ent.elasticity},
        {"weight", ent.weight},
        {"acceleration", ent.acceleration},
        {"max_speed", ent.max_speed},
        {"sprint_factor", ent.sprint_factor},
        {"jump", ent.jump},
        {"texture", ent.texture},
        {"technique", ent.technique},
        {"tile_x", ent.tile_x},
        {"tile_y", ent.tile_y},
        {"damage", ent.damage},
        {"life", ent.life},
        {"attachOffsetX", ent.default_special_offsetx},
        {"attachOffsetY", ent.default_special_offsety},
        {"animations", get_animations_as_string_map(ent)},
    };
}
void to_json(float_json& j, const Texture& tex)
{
    j = float_json{
        {"path", *tex.name},
        {"width", tex.width},
        {"height", tex.height},
        {"num_tiles",
         float_json{
             {"width", tex.num_tiles_width},
             {"height", tex.num_tiles_height},
         }},
        {"tile_width", static_cast<std::uint32_t>(std::round(tex.tile_width_fraction * tex.width))},
        {"tile_height", static_cast<std::uint32_t>(std::round(tex.tile_height_fraction * tex.height))},
        {"offset",
         float_json{
             {"width", static_cast<std::uint32_t>(std::round(tex.offset_x_weird_math * tex.width - 0.5f))},
             {"height", static_cast<std::uint32_t>(std::round(tex.offset_y_weird_math * tex.height - 0.5f))},
         }},
    };
}

using namespace std::chrono_literals;

extern "C" __declspec(dllexport) void run([[maybe_unused]] DWORD pid)
{
    DEBUG("Game injected! Press Ctrl+C to detach this window from the process.");

    while (true)
    {
        auto entities = list_entities();
        if (entities.size() >= 850)
        {
            DEBUG("Found {} entities, that's enough", entities.size());
            std::this_thread::sleep_for(100ms);
            DEBUG("Added {} entities", entities.size());
            break;
        }
        else if (entities.size() > 0)
        {
            DEBUG("Found {} entities", entities.size());
        }
        std::this_thread::sleep_for(100ms);
    }

    auto items = list_entities();
    std::sort(items.begin(), items.end(), [](EntityItem& a, EntityItem& b) -> bool
              { return a.id < b.id; });

    Textures* textures_ptr = get_textures();
    std::sort(
        textures_ptr->textures.begin(), textures_ptr->textures.end(), [](Texture& a, Texture& b) -> bool
        { return a.id < b.id; });

    std::filesystem::create_directories("game_data");

    if (std::ofstream entities_file = std::ofstream("game_data/entities.json"))
    {
        float_json entities(float_json::object());
        for (auto& ent : items)
        {
            EntityDB* db = get_type(ent.id);
            if (!db)
                break;

#define HAX_FIX_FLOAT(x)                           \
    if (std::abs(x) < 1e-10 || std::abs(x) > 1e10) \
    x = 0.0f
            HAX_FIX_FLOAT(db->width);
            HAX_FIX_FLOAT(db->height);
            HAX_FIX_FLOAT(db->friction);
            HAX_FIX_FLOAT(db->elasticity);
            HAX_FIX_FLOAT(db->weight);
            HAX_FIX_FLOAT(db->acceleration);
            HAX_FIX_FLOAT(db->max_speed);
            HAX_FIX_FLOAT(db->sprint_factor);
            HAX_FIX_FLOAT(db->jump);
            HAX_FIX_FLOAT(db->default_color.r);
            HAX_FIX_FLOAT(db->default_color.g);
            HAX_FIX_FLOAT(db->default_color.b);
            HAX_FIX_FLOAT(db->default_color.a);
            HAX_FIX_FLOAT(db->field_a8);
            HAX_FIX_FLOAT(db->default_special_offsetx);
            HAX_FIX_FLOAT(db->default_special_offsety);
#undef HAX_FIX_FLOAT

            entities[ent.name] = *db;
        }

        std::string dump = entities.dump(2);
        entities_file.write(dump.data(), dump.size());
    }

    if (std::ofstream entities_file = std::ofstream("game_data/entities_texture_only.json"))
    {
        float_json entities(float_json::object());
        for (auto& ent : items)
        {
            EntityDB* db = get_type(ent.id);
            if (!db)
                break;

            entities[ent.name] = float_json{
                {"id", ent.id},
                {"texture", db->texture},
                {"animations", get_animations_as_string_map(*db)}};
        }

        std::string dump = entities.dump(2);
        entities_file.write(dump.data(), dump.size());
    }

    if (std::ofstream textures_file = std::ofstream("game_data/textures.json"))
    {
        float_json textures(float_json::object());
        for (std::size_t i = 0; i < textures_ptr->num_textures; i++)
        {
            Texture& tex = textures_ptr->textures[i];
            if (tex.name != nullptr)
            {
                textures[std::to_string(tex.id)] = tex;
            }
        }

        std::string dump = textures.dump(2);
        textures_file.write(dump.data(), dump.size());
    }

    if (std::ofstream file = std::ofstream("game_data/textures.txt"))
    {
        std::unordered_map<std::string, uint32_t> counts;
        for (auto* tex : get_textures()->texture_map)
        {
            if (tex != nullptr && tex->name != nullptr)
            {
                std::string clean_tex_name = *tex->name;
                std::transform(
                    clean_tex_name.begin(), clean_tex_name.end(), clean_tex_name.begin(), [](unsigned char c)
                    { return (unsigned char)std::toupper(c); });
                std::replace(clean_tex_name.begin(), clean_tex_name.end(), '/', '_');
                size_t index = clean_tex_name.find(".DDS", 0);
                if (index != std::string::npos)
                {
                    clean_tex_name.erase(index, 4);
                }
                clean_tex_name += '_' + std::to_string(counts[clean_tex_name]++);
                file << "TEXTURE." << clean_tex_name << ": " << tex->id << std::endl;
            }
        }
    }

    if (std::ofstream search_flags_file = std::ofstream("game_data/search_flags.json"))
    {
        float_json search_flags(float_json::object());
        for (int i = 0; i < 32; ++i)
        {
            std::uint32_t search_flag = 1U << i;
            std::vector<std::string> entities;
            for (auto& ent : items)
            {
                EntityDB* db = get_type(ent.id);
                if (!db)
                    break;
                if ((db->search_flags & search_flag) != 0)
                {
                    entities.push_back(ent.name);
                }
            }
            search_flags[fmt::format("{}", search_flag)] = std::move(entities);
        }

        std::string dump = search_flags.dump(2);
        search_flags_file.write(dump.data(), dump.size());
    }

    if (auto file = std::ofstream("game_data/entities.txt"))
    {
        for (auto& ent : items)
        {
            EntityDB* db = get_type(ent.id);
            if (!db)
                break;
            file << ent.id << ": " << ent.name << std::endl;
        }
    }

    SoundManager sound_mgr(nullptr);

    if (auto file = std::ofstream("game_data/vanilla_sounds.txt"))
    {
        sound_mgr.for_each_event_name(
            [&file](std::string event_name)
            {
                std::string clean_event_name = event_name;
                std::transform(
                    clean_event_name.begin(), clean_event_name.end(), clean_event_name.begin(), [](unsigned char c)
                    { return (unsigned char)std::toupper(c); });
                std::replace(clean_event_name.begin(), clean_event_name.end(), '/', '_');
                file << event_name << ": VANILLA_SOUND." << clean_event_name << std::endl;
            });
    }

    if (auto file = std::ofstream("game_data/vanilla_sound_params.txt"))
    {
        sound_mgr.for_each_parameter_name(
            [&file](std::string parameter_name, std::uint32_t id)
            {
                std::transform(parameter_name.begin(), parameter_name.end(), parameter_name.begin(), [](unsigned char c)
                               { return (unsigned char)std::toupper(c); });
                file << id << ": VANILLA_SOUND_PARAM." << parameter_name << std::endl;
            });
    }

    if (auto file = std::ofstream("game_data/particle_emitters.txt"))
    {
        auto particles = list_particles();
        for (const auto& particle : particles)
        {
            file << particle.id << ": " << particle.name << "\n";
        }
    }

    if (auto file = std::ofstream("game_data/lua_enums.txt"))
    {
        SpelunkyConsole api_gen_script(&sound_mgr);
        file << api_gen_script.dump_api() << std::endl;
        // file << "---@diagnostic disable: lowercase-global,deprecated" << std::endl;
    }

    auto state = State::get().ptr_main();

    if (auto file = std::ofstream("game_data/tile_codes.txt"))
    {
        for (const auto& tile_code : state->level_gen->data->tile_codes)
        {
            std::string clean_tile_code_name = tile_code.first.c_str();
            std::transform(
                clean_tile_code_name.begin(), clean_tile_code_name.end(), clean_tile_code_name.begin(), [](unsigned char c)
                { return (unsigned char)std::toupper(c); });
            std::replace(clean_tile_code_name.begin(), clean_tile_code_name.end(), '-', '_');
            file << clean_tile_code_name << ": " << tile_code.second.id << "\n";
        }
    }

    if (auto file = std::ofstream("game_data/spawn_chances.txt"))
    {
        std::multimap<std::uint32_t, std::string> ordered_chances;
        for (auto* chances : {&state->level_gen->data->monster_chances, &state->level_gen->data->trap_chances})
        {
            for (const auto& spawn_chanc : *chances)
            {
                std::string clean_chance_name = spawn_chanc.first.c_str();
                std::transform(
                    clean_chance_name.begin(), clean_chance_name.end(), clean_chance_name.begin(), [](unsigned char c)
                    { return (unsigned char)std::toupper(c); });
                std::replace(clean_chance_name.begin(), clean_chance_name.end(), '-', '_');
                ordered_chances.insert({spawn_chanc.second.id, std::move(clean_chance_name)});
            }
        }
        for (const auto& [id, name] : ordered_chances)
            file << name << ": " << id << "\n";
    }

    if (auto file = std::ofstream("game_data/room_templates.txt"))
    {
        auto templates = state->level_gen->data->room_templates;
        templates["empty_backlayer"] = {9};
        templates["boss_arena"] = {22};
        templates["shop_jail_backlayer"] = {44};
        templates["waddler"] = {86};
        templates["ghistshop_backlayer"] = {87};
        templates["challange_entrance_backlayer"] = {90};
        templates["blackmarket"] = {118};
        templates["mothership_room"] = {125};

        std::multimap<std::uint16_t, std::string> ordered_templates;
        for (const auto& room_template : templates)
        {
            std::string clean_room_name = room_template.first.c_str();
            std::transform(
                clean_room_name.begin(), clean_room_name.end(), clean_room_name.begin(), [](unsigned char c)
                { return (unsigned char)std::toupper(c); });
            std::replace(clean_room_name.begin(), clean_room_name.end(), '-', '_');
            ordered_templates.insert({room_template.second.id, std::move(clean_room_name)});
        }
        for (const auto& [id, name] : ordered_templates)
            file << name << ": " << id << "\n";
    }

    if (auto file = std::ofstream("game_data/game_settings.txt"))
    {
        for (auto [setting_name_view, setting_index] : get_settings_names_and_indices())
        {
            std::string setting_name{setting_name_view};
            std::transform(setting_name.begin(), setting_name.end(), setting_name.begin(), [](unsigned char c)
                           { return (unsigned char)std::toupper(c); });
            file << setting_name << ": " << static_cast<std::int32_t>(setting_index) << "\n";
        }
    }

    get_vtables();

    std::exit(0);
}
